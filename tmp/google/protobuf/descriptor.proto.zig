// Code generated by protoc-gen-zig

const std = @import("std");
const mem = std.mem;
const Allocator = mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const FieldDescriptor = protobuf.FieldDescriptor;
const pb_decode = protobuf.pb_decode;
const pb_encode = protobuf.pb_encode;
const pb_deinit = protobuf.pb_deinit;
const pb_init = protobuf.pb_init;
const fd = protobuf.fd;

pub const FileDescriptorSet = struct {
    pub const _desc_table = .{
        .file = fd(1, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: FileDescriptorSet, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !FileDescriptorSet {
        return pb_decode(FileDescriptorSet, input, allocator);
    }
    pub fn init(allocator: Allocator) FileDescriptorSet {
        return pb_init(FileDescriptorSet, allocator);
    }
    pub fn deinit(self: FileDescriptorSet) void {
        return pb_deinit(self);
    }
};

pub const FileDescriptorProto = struct {
    pub const _desc_table = .{
        .name = fd(1, .{ .List = .String }, []const u8),
        .package = fd(2, .{ .List = .String }, []const u8),
        .dependency = fd(3, .{ .List = .String }, []const u8),
        .public_dependency = fd(10, .{ .List = .String }, []const u8),
        .weak_dependency = fd(11, .{ .List = .String }, []const u8),
        .message_type = fd(4, .{ .List = .String }, []const u8),
        .enum_type = fd(5, .{ .List = .String }, []const u8),
        .service = fd(6, .{ .List = .String }, []const u8),
        .extension = fd(7, .{ .List = .String }, []const u8),
        .options = fd(8, .{ .List = .String }, []const u8),
        .source_code_info = fd(9, .{ .List = .String }, []const u8),
        .syntax = fd(12, .{ .List = .String }, []const u8),
        .edition = fd(13, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: FileDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !FileDescriptorProto {
        return pb_decode(FileDescriptorProto, input, allocator);
    }
    pub fn init(allocator: Allocator) FileDescriptorProto {
        return pb_init(FileDescriptorProto, allocator);
    }
    pub fn deinit(self: FileDescriptorProto) void {
        return pb_deinit(self);
    }
};

pub const DescriptorProto = struct {
    pub const _desc_table = .{
        .name = fd(1, .{ .List = .String }, []const u8),
        .field = fd(2, .{ .List = .String }, []const u8),
        .extension = fd(6, .{ .List = .String }, []const u8),
        .nested_type = fd(3, .{ .List = .String }, []const u8),
        .enum_type = fd(4, .{ .List = .String }, []const u8),
        .extension_range = fd(5, .{ .List = .String }, []const u8),
        .oneof_decl = fd(8, .{ .List = .String }, []const u8),
        .options = fd(7, .{ .List = .String }, []const u8),
        .reserved_range = fd(9, .{ .List = .String }, []const u8),
        .reserved_name = fd(10, .{ .List = .String }, []const u8),
    };

pub const ExtensionRange = struct {
    pub const _desc_table = .{
        .start = fd(1, .{ .List = .String }, []const u8),
        .end = fd(2, .{ .List = .String }, []const u8),
        .options = fd(3, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: ExtensionRange, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !ExtensionRange {
        return pb_decode(ExtensionRange, input, allocator);
    }
    pub fn init(allocator: Allocator) ExtensionRange {
        return pb_init(ExtensionRange, allocator);
    }
    pub fn deinit(self: ExtensionRange) void {
        return pb_deinit(self);
    }
};

pub const ReservedRange = struct {
    pub const _desc_table = .{
        .start = fd(1, .{ .List = .String }, []const u8),
        .end = fd(2, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: ReservedRange, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !ReservedRange {
        return pb_decode(ReservedRange, input, allocator);
    }
    pub fn init(allocator: Allocator) ReservedRange {
        return pb_init(ReservedRange, allocator);
    }
    pub fn deinit(self: ReservedRange) void {
        return pb_deinit(self);
    }
};


    pub fn encode(self: DescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !DescriptorProto {
        return pb_decode(DescriptorProto, input, allocator);
    }
    pub fn init(allocator: Allocator) DescriptorProto {
        return pb_init(DescriptorProto, allocator);
    }
    pub fn deinit(self: DescriptorProto) void {
        return pb_deinit(self);
    }
};

pub const ExtensionRangeOptions = struct {
pub const VerificationState = enum(i32) {
   DECLARATION = 0,
   UNVERIFIED = 1,
    _,
};


    pub const _desc_table = .{
        .uninterpreted_option = fd(999, .{ .List = .String }, []const u8),
        .declaration = fd(2, .{ .List = .String }, []const u8),
        .verification = fd(3, .{ .List = .String }, []const u8),
    };

pub const Declaration = struct {
    pub const _desc_table = .{
        .number = fd(1, .{ .List = .String }, []const u8),
        .full_name = fd(2, .{ .List = .String }, []const u8),
        .@"type" = fd(3, .{ .List = .String }, []const u8),
        .is_repeated = fd(4, .{ .List = .String }, []const u8),
        .reserved = fd(5, .{ .List = .String }, []const u8),
        .repeated = fd(6, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: Declaration, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !Declaration {
        return pb_decode(Declaration, input, allocator);
    }
    pub fn init(allocator: Allocator) Declaration {
        return pb_init(Declaration, allocator);
    }
    pub fn deinit(self: Declaration) void {
        return pb_deinit(self);
    }
};


    pub fn encode(self: ExtensionRangeOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !ExtensionRangeOptions {
        return pb_decode(ExtensionRangeOptions, input, allocator);
    }
    pub fn init(allocator: Allocator) ExtensionRangeOptions {
        return pb_init(ExtensionRangeOptions, allocator);
    }
    pub fn deinit(self: ExtensionRangeOptions) void {
        return pb_deinit(self);
    }
};

pub const FieldDescriptorProto = struct {
pub const Type = enum(i32) {
   TYPE_DOUBLE = 1,
   TYPE_FLOAT = 2,
   TYPE_INT64 = 3,
   TYPE_UINT64 = 4,
   TYPE_INT32 = 5,
   TYPE_FIXED64 = 6,
   TYPE_FIXED32 = 7,
   TYPE_BOOL = 8,
   TYPE_STRING = 9,
   TYPE_GROUP = 10,
   TYPE_MESSAGE = 11,
   TYPE_BYTES = 12,
   TYPE_UINT32 = 13,
   TYPE_ENUM = 14,
   TYPE_SFIXED32 = 15,
   TYPE_SFIXED64 = 16,
   TYPE_SINT32 = 17,
   TYPE_SINT64 = 18,
    _,
};


pub const Label = enum(i32) {
   LABEL_OPTIONAL = 1,
   LABEL_REQUIRED = 2,
   LABEL_REPEATED = 3,
    _,
};


    pub const _desc_table = .{
        .name = fd(1, .{ .List = .String }, []const u8),
        .number = fd(3, .{ .List = .String }, []const u8),
        .label = fd(4, .{ .List = .String }, []const u8),
        .@"type" = fd(5, .{ .List = .String }, []const u8),
        .type_name = fd(6, .{ .List = .String }, []const u8),
        .extendee = fd(2, .{ .List = .String }, []const u8),
        .default_value = fd(7, .{ .List = .String }, []const u8),
        .oneof_index = fd(9, .{ .List = .String }, []const u8),
        .json_name = fd(10, .{ .List = .String }, []const u8),
        .options = fd(8, .{ .List = .String }, []const u8),
        .proto3_optional = fd(17, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: FieldDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !FieldDescriptorProto {
        return pb_decode(FieldDescriptorProto, input, allocator);
    }
    pub fn init(allocator: Allocator) FieldDescriptorProto {
        return pb_init(FieldDescriptorProto, allocator);
    }
    pub fn deinit(self: FieldDescriptorProto) void {
        return pb_deinit(self);
    }
};

pub const OneofDescriptorProto = struct {
    pub const _desc_table = .{
        .name = fd(1, .{ .List = .String }, []const u8),
        .options = fd(2, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: OneofDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !OneofDescriptorProto {
        return pb_decode(OneofDescriptorProto, input, allocator);
    }
    pub fn init(allocator: Allocator) OneofDescriptorProto {
        return pb_init(OneofDescriptorProto, allocator);
    }
    pub fn deinit(self: OneofDescriptorProto) void {
        return pb_deinit(self);
    }
};

pub const EnumDescriptorProto = struct {
    pub const _desc_table = .{
        .name = fd(1, .{ .List = .String }, []const u8),
        .value = fd(2, .{ .List = .String }, []const u8),
        .options = fd(3, .{ .List = .String }, []const u8),
        .reserved_range = fd(4, .{ .List = .String }, []const u8),
        .reserved_name = fd(5, .{ .List = .String }, []const u8),
    };

pub const EnumReservedRange = struct {
    pub const _desc_table = .{
        .start = fd(1, .{ .List = .String }, []const u8),
        .end = fd(2, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: EnumReservedRange, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !EnumReservedRange {
        return pb_decode(EnumReservedRange, input, allocator);
    }
    pub fn init(allocator: Allocator) EnumReservedRange {
        return pb_init(EnumReservedRange, allocator);
    }
    pub fn deinit(self: EnumReservedRange) void {
        return pb_deinit(self);
    }
};


    pub fn encode(self: EnumDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !EnumDescriptorProto {
        return pb_decode(EnumDescriptorProto, input, allocator);
    }
    pub fn init(allocator: Allocator) EnumDescriptorProto {
        return pb_init(EnumDescriptorProto, allocator);
    }
    pub fn deinit(self: EnumDescriptorProto) void {
        return pb_deinit(self);
    }
};

pub const EnumValueDescriptorProto = struct {
    pub const _desc_table = .{
        .name = fd(1, .{ .List = .String }, []const u8),
        .number = fd(2, .{ .List = .String }, []const u8),
        .options = fd(3, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: EnumValueDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !EnumValueDescriptorProto {
        return pb_decode(EnumValueDescriptorProto, input, allocator);
    }
    pub fn init(allocator: Allocator) EnumValueDescriptorProto {
        return pb_init(EnumValueDescriptorProto, allocator);
    }
    pub fn deinit(self: EnumValueDescriptorProto) void {
        return pb_deinit(self);
    }
};

pub const ServiceDescriptorProto = struct {
    pub const _desc_table = .{
        .name = fd(1, .{ .List = .String }, []const u8),
        .method = fd(2, .{ .List = .String }, []const u8),
        .options = fd(3, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: ServiceDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !ServiceDescriptorProto {
        return pb_decode(ServiceDescriptorProto, input, allocator);
    }
    pub fn init(allocator: Allocator) ServiceDescriptorProto {
        return pb_init(ServiceDescriptorProto, allocator);
    }
    pub fn deinit(self: ServiceDescriptorProto) void {
        return pb_deinit(self);
    }
};

pub const MethodDescriptorProto = struct {
    pub const _desc_table = .{
        .name = fd(1, .{ .List = .String }, []const u8),
        .input_type = fd(2, .{ .List = .String }, []const u8),
        .output_type = fd(3, .{ .List = .String }, []const u8),
        .options = fd(4, .{ .List = .String }, []const u8),
        .client_streaming = fd(5, .{ .List = .String }, []const u8),
        .server_streaming = fd(6, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: MethodDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !MethodDescriptorProto {
        return pb_decode(MethodDescriptorProto, input, allocator);
    }
    pub fn init(allocator: Allocator) MethodDescriptorProto {
        return pb_init(MethodDescriptorProto, allocator);
    }
    pub fn deinit(self: MethodDescriptorProto) void {
        return pb_deinit(self);
    }
};

pub const FileOptions = struct {
pub const OptimizeMode = enum(i32) {
   SPEED = 1,
   CODE_SIZE = 2,
   LITE_RUNTIME = 3,
    _,
};


    pub const _desc_table = .{
        .java_package = fd(1, .{ .List = .String }, []const u8),
        .java_outer_classname = fd(8, .{ .List = .String }, []const u8),
        .java_multiple_files = fd(10, .{ .List = .String }, []const u8),
        .java_generate_equals_and_hash = fd(20, .{ .List = .String }, []const u8),
        .java_string_check_utf8 = fd(27, .{ .List = .String }, []const u8),
        .optimize_for = fd(9, .{ .List = .String }, []const u8),
        .go_package = fd(11, .{ .List = .String }, []const u8),
        .cc_generic_services = fd(16, .{ .List = .String }, []const u8),
        .java_generic_services = fd(17, .{ .List = .String }, []const u8),
        .py_generic_services = fd(18, .{ .List = .String }, []const u8),
        .php_generic_services = fd(42, .{ .List = .String }, []const u8),
        .deprecated = fd(23, .{ .List = .String }, []const u8),
        .cc_enable_arenas = fd(31, .{ .List = .String }, []const u8),
        .objc_class_prefix = fd(36, .{ .List = .String }, []const u8),
        .csharp_namespace = fd(37, .{ .List = .String }, []const u8),
        .swift_prefix = fd(39, .{ .List = .String }, []const u8),
        .php_class_prefix = fd(40, .{ .List = .String }, []const u8),
        .php_namespace = fd(41, .{ .List = .String }, []const u8),
        .php_metadata_namespace = fd(44, .{ .List = .String }, []const u8),
        .ruby_package = fd(45, .{ .List = .String }, []const u8),
        .uninterpreted_option = fd(999, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: FileOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !FileOptions {
        return pb_decode(FileOptions, input, allocator);
    }
    pub fn init(allocator: Allocator) FileOptions {
        return pb_init(FileOptions, allocator);
    }
    pub fn deinit(self: FileOptions) void {
        return pb_deinit(self);
    }
};

pub const MessageOptions = struct {
    pub const _desc_table = .{
        .message_set_wire_format = fd(1, .{ .List = .String }, []const u8),
        .no_standard_descriptor_accessor = fd(2, .{ .List = .String }, []const u8),
        .deprecated = fd(3, .{ .List = .String }, []const u8),
        .map_entry = fd(7, .{ .List = .String }, []const u8),
        .deprecated_legacy_json_field_conflicts = fd(11, .{ .List = .String }, []const u8),
        .uninterpreted_option = fd(999, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: MessageOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !MessageOptions {
        return pb_decode(MessageOptions, input, allocator);
    }
    pub fn init(allocator: Allocator) MessageOptions {
        return pb_init(MessageOptions, allocator);
    }
    pub fn deinit(self: MessageOptions) void {
        return pb_deinit(self);
    }
};

pub const FieldOptions = struct {
pub const CType = enum(i32) {
   STRING = 0,
   CORD = 1,
   STRING_PIECE = 2,
    _,
};


pub const JSType = enum(i32) {
   JS_NORMAL = 0,
   JS_STRING = 1,
   JS_NUMBER = 2,
    _,
};


pub const OptionRetention = enum(i32) {
   RETENTION_UNKNOWN = 0,
   RETENTION_RUNTIME = 1,
   RETENTION_SOURCE = 2,
    _,
};


pub const OptionTargetType = enum(i32) {
   TARGET_TYPE_UNKNOWN = 0,
   TARGET_TYPE_FILE = 1,
   TARGET_TYPE_EXTENSION_RANGE = 2,
   TARGET_TYPE_MESSAGE = 3,
   TARGET_TYPE_FIELD = 4,
   TARGET_TYPE_ONEOF = 5,
   TARGET_TYPE_ENUM = 6,
   TARGET_TYPE_ENUM_ENTRY = 7,
   TARGET_TYPE_SERVICE = 8,
   TARGET_TYPE_METHOD = 9,
    _,
};


    pub const _desc_table = .{
        .ctype = fd(1, .{ .List = .String }, []const u8),
        .@"packed" = fd(2, .{ .List = .String }, []const u8),
        .jstype = fd(6, .{ .List = .String }, []const u8),
        .lazy = fd(5, .{ .List = .String }, []const u8),
        .unverified_lazy = fd(15, .{ .List = .String }, []const u8),
        .deprecated = fd(3, .{ .List = .String }, []const u8),
        .weak = fd(10, .{ .List = .String }, []const u8),
        .debug_redact = fd(16, .{ .List = .String }, []const u8),
        .retention = fd(17, .{ .List = .String }, []const u8),
        .target = fd(18, .{ .List = .String }, []const u8),
        .targets = fd(19, .{ .List = .String }, []const u8),
        .uninterpreted_option = fd(999, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: FieldOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !FieldOptions {
        return pb_decode(FieldOptions, input, allocator);
    }
    pub fn init(allocator: Allocator) FieldOptions {
        return pb_init(FieldOptions, allocator);
    }
    pub fn deinit(self: FieldOptions) void {
        return pb_deinit(self);
    }
};

pub const OneofOptions = struct {
    pub const _desc_table = .{
        .uninterpreted_option = fd(999, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: OneofOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !OneofOptions {
        return pb_decode(OneofOptions, input, allocator);
    }
    pub fn init(allocator: Allocator) OneofOptions {
        return pb_init(OneofOptions, allocator);
    }
    pub fn deinit(self: OneofOptions) void {
        return pb_deinit(self);
    }
};

pub const EnumOptions = struct {
    pub const _desc_table = .{
        .allow_alias = fd(2, .{ .List = .String }, []const u8),
        .deprecated = fd(3, .{ .List = .String }, []const u8),
        .deprecated_legacy_json_field_conflicts = fd(6, .{ .List = .String }, []const u8),
        .uninterpreted_option = fd(999, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: EnumOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !EnumOptions {
        return pb_decode(EnumOptions, input, allocator);
    }
    pub fn init(allocator: Allocator) EnumOptions {
        return pb_init(EnumOptions, allocator);
    }
    pub fn deinit(self: EnumOptions) void {
        return pb_deinit(self);
    }
};

pub const EnumValueOptions = struct {
    pub const _desc_table = .{
        .deprecated = fd(1, .{ .List = .String }, []const u8),
        .uninterpreted_option = fd(999, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: EnumValueOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !EnumValueOptions {
        return pb_decode(EnumValueOptions, input, allocator);
    }
    pub fn init(allocator: Allocator) EnumValueOptions {
        return pb_init(EnumValueOptions, allocator);
    }
    pub fn deinit(self: EnumValueOptions) void {
        return pb_deinit(self);
    }
};

pub const ServiceOptions = struct {
    pub const _desc_table = .{
        .deprecated = fd(33, .{ .List = .String }, []const u8),
        .uninterpreted_option = fd(999, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: ServiceOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !ServiceOptions {
        return pb_decode(ServiceOptions, input, allocator);
    }
    pub fn init(allocator: Allocator) ServiceOptions {
        return pb_init(ServiceOptions, allocator);
    }
    pub fn deinit(self: ServiceOptions) void {
        return pb_deinit(self);
    }
};

pub const MethodOptions = struct {
pub const IdempotencyLevel = enum(i32) {
   IDEMPOTENCY_UNKNOWN = 0,
   NO_SIDE_EFFECTS = 1,
   IDEMPOTENT = 2,
    _,
};


    pub const _desc_table = .{
        .deprecated = fd(33, .{ .List = .String }, []const u8),
        .idempotency_level = fd(34, .{ .List = .String }, []const u8),
        .uninterpreted_option = fd(999, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: MethodOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !MethodOptions {
        return pb_decode(MethodOptions, input, allocator);
    }
    pub fn init(allocator: Allocator) MethodOptions {
        return pb_init(MethodOptions, allocator);
    }
    pub fn deinit(self: MethodOptions) void {
        return pb_deinit(self);
    }
};

pub const UninterpretedOption = struct {
    pub const _desc_table = .{
        .name = fd(2, .{ .List = .String }, []const u8),
        .identifier_value = fd(3, .{ .List = .String }, []const u8),
        .positive_int_value = fd(4, .{ .List = .String }, []const u8),
        .negative_int_value = fd(5, .{ .List = .String }, []const u8),
        .double_value = fd(6, .{ .List = .String }, []const u8),
        .string_value = fd(7, .{ .List = .String }, []const u8),
        .aggregate_value = fd(8, .{ .List = .String }, []const u8),
    };

pub const NamePart = struct {
    pub const _desc_table = .{
        .name_part = fd(1, .{ .List = .String }, []const u8),
        .is_extension = fd(2, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: NamePart, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !NamePart {
        return pb_decode(NamePart, input, allocator);
    }
    pub fn init(allocator: Allocator) NamePart {
        return pb_init(NamePart, allocator);
    }
    pub fn deinit(self: NamePart) void {
        return pb_deinit(self);
    }
};


    pub fn encode(self: UninterpretedOption, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !UninterpretedOption {
        return pb_decode(UninterpretedOption, input, allocator);
    }
    pub fn init(allocator: Allocator) UninterpretedOption {
        return pb_init(UninterpretedOption, allocator);
    }
    pub fn deinit(self: UninterpretedOption) void {
        return pb_deinit(self);
    }
};

pub const SourceCodeInfo = struct {
    pub const _desc_table = .{
        .location = fd(1, .{ .List = .String }, []const u8),
    };

pub const Location = struct {
    pub const _desc_table = .{
        .path = fd(1, .{ .List = .String }, []const u8),
        .span = fd(2, .{ .List = .String }, []const u8),
        .leading_comments = fd(3, .{ .List = .String }, []const u8),
        .trailing_comments = fd(4, .{ .List = .String }, []const u8),
        .leading_detached_comments = fd(6, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: Location, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !Location {
        return pb_decode(Location, input, allocator);
    }
    pub fn init(allocator: Allocator) Location {
        return pb_init(Location, allocator);
    }
    pub fn deinit(self: Location) void {
        return pb_deinit(self);
    }
};


    pub fn encode(self: SourceCodeInfo, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !SourceCodeInfo {
        return pb_decode(SourceCodeInfo, input, allocator);
    }
    pub fn init(allocator: Allocator) SourceCodeInfo {
        return pb_init(SourceCodeInfo, allocator);
    }
    pub fn deinit(self: SourceCodeInfo) void {
        return pb_deinit(self);
    }
};

pub const GeneratedCodeInfo = struct {
    pub const _desc_table = .{
        .annotation = fd(1, .{ .List = .String }, []const u8),
    };

pub const Annotation = struct {
pub const Semantic = enum(i32) {
   NONE = 0,
   SET = 1,
   ALIAS = 2,
    _,
};


    pub const _desc_table = .{
        .path = fd(1, .{ .List = .String }, []const u8),
        .source_file = fd(2, .{ .List = .String }, []const u8),
        .begin = fd(3, .{ .List = .String }, []const u8),
        .end = fd(4, .{ .List = .String }, []const u8),
        .semantic = fd(5, .{ .List = .String }, []const u8),
    };


    pub fn encode(self: Annotation, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !Annotation {
        return pb_decode(Annotation, input, allocator);
    }
    pub fn init(allocator: Allocator) Annotation {
        return pb_init(Annotation, allocator);
    }
    pub fn deinit(self: Annotation) void {
        return pb_deinit(self);
    }
};


    pub fn encode(self: GeneratedCodeInfo, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !GeneratedCodeInfo {
        return pb_decode(GeneratedCodeInfo, input, allocator);
    }
    pub fn init(allocator: Allocator) GeneratedCodeInfo {
        return pb_init(GeneratedCodeInfo, allocator);
    }
    pub fn deinit(self: GeneratedCodeInfo) void {
        return pb_deinit(self);
    }
};
