// Code generated by protoc-gen-zig-go

const std = @import("std");
const mem = std.mem;
const Allocator = mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const FieldDescriptor = protobuf.FieldDescriptor;
const pb_decode = protobuf.pb_decode;
const pb_encode = protobuf.pb_encode;
const pb_deinit = protobuf.pb_deinit;
const pb_init = protobuf.pb_init;
const fd = protobuf.fd;

// The protocol compiler can output a FileDescriptorSet containing the .proto
// files it parses.
pub const FileDescriptorSet = struct {
    file: ArrayList(FileDescriptorProto),

    pub const _desc_table = .{
        .file = fd(1, .{ .List = .SubMessage }, ArrayList(FileDescriptorProto)),
    };

    pub fn encode(self: FileDescriptorSet, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !FileDescriptorSet {
        return pb_decode(FileDescriptorSet, input, allocator);
    }

    pub fn init(allocator: Allocator) FileDescriptorSet {
        return pb_init(FileDescriptorSet, allocator);
    }

    pub fn deinit(self: FileDescriptorSet) void {
        return pb_deinit(self);
    }
};

// Describes a complete .proto file.
pub const FileDescriptorProto = struct {
    name: ?[]const u8,
    package: ?[]const u8,
    // Names of files imported by this file.
    dependency: ArrayList([]const u8),
    // Indexes of the public imported files in the dependency list above.
    public_dependency: ArrayList(i32),
    // Indexes of the weak imported files in the dependency list.
    // For Google-internal migration only. Do not use.
    weak_dependency: ArrayList(i32),
    // All top-level definitions in this file.
    message_type: ArrayList(DescriptorProto),
    enum_type: ArrayList(EnumDescriptorProto),
    service: ArrayList(ServiceDescriptorProto),
    extension: ArrayList(FieldDescriptorProto),
    options: ?FileOptions,
    // This field contains optional information about the original source code.
    // You may safely remove this entire field without harming runtime
    // functionality of the descriptors -- the information is needed only by
    // development tools.
    source_code_info: ?SourceCodeInfo,
    // The syntax of the proto file.
    // The supported values are "proto2", "proto3", and "editions".
    //
    // If `edition` is present, this value must be "editions".
    syntax: ?[]const u8,
    // The edition of the proto file, which is an opaque string.
    edition: ?[]const u8,

    pub const _desc_table = .{
        .name = fd(1, .String, ?[]const u8),
        .package = fd(2, .String, ?[]const u8),
        .dependency = fd(3, .{ .List = .String }, ArrayList([]const u8)),
        .public_dependency = fd(10, .{ .List = .{ .Varint = .Simple } }, ArrayList(i32)),
        .weak_dependency = fd(11, .{ .List = .{ .Varint = .Simple } }, ArrayList(i32)),
        .message_type = fd(4, .{ .List = .SubMessage }, ArrayList(DescriptorProto)),
        .enum_type = fd(5, .{ .List = .SubMessage }, ArrayList(EnumDescriptorProto)),
        .service = fd(6, .{ .List = .SubMessage }, ArrayList(ServiceDescriptorProto)),
        .extension = fd(7, .{ .List = .SubMessage }, ArrayList(FieldDescriptorProto)),
        .options = fd(8, .{ .SubMessage = {} }, ?FileOptions),
        .source_code_info = fd(9, .{ .SubMessage = {} }, ?SourceCodeInfo),
        .syntax = fd(12, .String, ?[]const u8),
        .edition = fd(13, .String, ?[]const u8),
    };

    pub fn encode(self: FileDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !FileDescriptorProto {
        return pb_decode(FileDescriptorProto, input, allocator);
    }

    pub fn init(allocator: Allocator) FileDescriptorProto {
        return pb_init(FileDescriptorProto, allocator);
    }

    pub fn deinit(self: FileDescriptorProto) void {
        return pb_deinit(self);
    }
};

// Describes a message type.
pub const DescriptorProto = struct {
    name: ?[]const u8,
    field: ArrayList(FieldDescriptorProto),
    extension: ArrayList(FieldDescriptorProto),
    nested_type: ArrayList(DescriptorProto),
    enum_type: ArrayList(EnumDescriptorProto),
    extension_range: ArrayList(ExtensionRange),
    oneof_decl: ArrayList(OneofDescriptorProto),
    options: ?MessageOptions,
    reserved_range: ArrayList(ReservedRange),
    // Reserved field names, which may not be used by fields in the same message.
    // A given name may only be reserved once.
    reserved_name: ArrayList([]const u8),
    pub const ExtensionRange = struct {
        start: ?i32,
        end: ?i32,
        options: ?ExtensionRangeOptions,

        pub const _desc_table = .{
            .start = fd(1, .{ .Varint = .Simple }, ?i32),
            .end = fd(2, .{ .Varint = .Simple }, ?i32),
            .options = fd(3, .{ .SubMessage = {} }, ?ExtensionRangeOptions),
        };

        pub fn encode(self: ExtensionRange, allocator: Allocator) ![]u8 {
            return pb_encode(self, allocator);
        }

        pub fn decode(input: []const u8, allocator: Allocator) !ExtensionRange {
            return pb_decode(ExtensionRange, input, allocator);
        }

        pub fn init(allocator: Allocator) ExtensionRange {
            return pb_init(ExtensionRange, allocator);
        }

        pub fn deinit(self: ExtensionRange) void {
            return pb_deinit(self);
        }
    };

    // Range of reserved tag numbers. Reserved tag numbers may not be used by
    // fields or extension ranges in the same message. Reserved ranges may
    // not overlap.
    pub const ReservedRange = struct {
        start: ?i32,
        end: ?i32,

        pub const _desc_table = .{
            .start = fd(1, .{ .Varint = .Simple }, ?i32),
            .end = fd(2, .{ .Varint = .Simple }, ?i32),
        };

        pub fn encode(self: ReservedRange, allocator: Allocator) ![]u8 {
            return pb_encode(self, allocator);
        }

        pub fn decode(input: []const u8, allocator: Allocator) !ReservedRange {
            return pb_decode(ReservedRange, input, allocator);
        }

        pub fn init(allocator: Allocator) ReservedRange {
            return pb_init(ReservedRange, allocator);
        }

        pub fn deinit(self: ReservedRange) void {
            return pb_deinit(self);
        }
    };

    pub const _desc_table = .{
        .name = fd(1, .String, ?[]const u8),
        .field = fd(2, .{ .List = .SubMessage }, ArrayList(FieldDescriptorProto)),
        .extension = fd(6, .{ .List = .SubMessage }, ArrayList(FieldDescriptorProto)),
        .nested_type = fd(3, .{ .List = .SubMessage }, ArrayList(DescriptorProto)),
        .enum_type = fd(4, .{ .List = .SubMessage }, ArrayList(EnumDescriptorProto)),
        .extension_range = fd(5, .{ .List = .SubMessage }, ArrayList(ExtensionRange)),
        .oneof_decl = fd(8, .{ .List = .SubMessage }, ArrayList(OneofDescriptorProto)),
        .options = fd(7, .{ .SubMessage = {} }, ?MessageOptions),
        .reserved_range = fd(9, .{ .List = .SubMessage }, ArrayList(ReservedRange)),
        .reserved_name = fd(10, .{ .List = .String }, ArrayList([]const u8)),
    };

    pub fn encode(self: DescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !DescriptorProto {
        return pb_decode(DescriptorProto, input, allocator);
    }

    pub fn init(allocator: Allocator) DescriptorProto {
        return pb_init(DescriptorProto, allocator);
    }

    pub fn deinit(self: DescriptorProto) void {
        return pb_deinit(self);
    }
};

pub const ExtensionRangeOptions = struct {
    // The parser stores options it doesn't recognize here. See above.
    uninterpreted_option: ArrayList(UninterpretedOption),
    // go/protobuf-stripping-extension-declarations
    // Like Metadata, but we use a repeated field to hold all extension
    // declarations. This should avoid the size increases of transforming a large
    // extension range into small ranges in generated binaries.
    declaration: ArrayList(Declaration),
    // The verification state of the range.
    // TODO(b/278783756): flip the default to DECLARATION once all empty ranges
    // are marked as UNVERIFIED.
    verification: ?VerificationState,
    // The verification state of the extension range.
    pub const VerificationState = enum(i32) {
        // All the extensions of the range must be declared.
        DECLARATION = 0,
        UNVERIFIED = 1,
        _,
    };

    pub const Declaration = struct {
        // The extension number declared within the extension range.
        number: ?i32,
        // The fully-qualified name of the extension field. There must be a leading
        // dot in front of the full name.
        full_name: ?[]const u8,
        // The fully-qualified type name of the extension field. Unlike
        // Metadata.type, Declaration.type must have a leading dot for messages
        // and enums.
        type: ?[]const u8,
        // Deprecated. Please use "repeated".
        is_repeated: ?bool,
        // If true, indicates that the number is reserved in the extension range,
        // and any extension field with the number will fail to compile. Set this
        // when a declared extension field is deleted.
        reserved: ?bool,
        // If true, indicates that the extension must be defined as repeated.
        // Otherwise the extension must be defined as optional.
        repeated: ?bool,

        pub const _desc_table = .{
            .number = fd(1, .{ .Varint = .Simple }, ?i32),
            .full_name = fd(2, .String, ?[]const u8),
            .type = fd(3, .String, ?[]const u8),
            .is_repeated = fd(4, .{ .Varint = .Simple }, ?bool),
            .reserved = fd(5, .{ .Varint = .Simple }, ?bool),
            .repeated = fd(6, .{ .Varint = .Simple }, ?bool),
        };

        pub fn encode(self: Declaration, allocator: Allocator) ![]u8 {
            return pb_encode(self, allocator);
        }

        pub fn decode(input: []const u8, allocator: Allocator) !Declaration {
            return pb_decode(Declaration, input, allocator);
        }

        pub fn init(allocator: Allocator) Declaration {
            return pb_init(Declaration, allocator);
        }

        pub fn deinit(self: Declaration) void {
            return pb_deinit(self);
        }
    };

    pub const _desc_table = .{
        .uninterpreted_option = fd(999, .{ .List = .SubMessage }, ArrayList(UninterpretedOption)),
        .declaration = fd(2, .{ .List = .SubMessage }, ArrayList(Declaration)),
        .verification = fd(3, .{ .Varint = .ZigZagOptimized }, ?VerificationState),
    };

    pub fn encode(self: ExtensionRangeOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !ExtensionRangeOptions {
        return pb_decode(ExtensionRangeOptions, input, allocator);
    }

    pub fn init(allocator: Allocator) ExtensionRangeOptions {
        return pb_init(ExtensionRangeOptions, allocator);
    }

    pub fn deinit(self: ExtensionRangeOptions) void {
        return pb_deinit(self);
    }
};

// Describes a field within a message.
pub const FieldDescriptorProto = struct {
    name: ?[]const u8,
    number: ?i32,
    label: ?Label,
    // If type_name is set, this need not be set.  If both this and type_name
    // are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.
    type: ?Type,
    // For message and enum types, this is the name of the type.  If the name
    // starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
    // rules are used to find the type (i.e. first the nested types within this
    // message are searched, then within the parent, on up to the root
    // namespace).
    type_name: ?[]const u8,
    // For extensions, this is the name of the type being extended.  It is
    // resolved in the same manner as type_name.
    extendee: ?[]const u8,
    // For numeric types, contains the original text representation of the value.
    // For booleans, "true" or "false".
    // For strings, contains the default text contents (not escaped in any way).
    // For bytes, contains the C escaped value.  All bytes >= 128 are escaped.
    default_value: ?[]const u8,
    // If set, gives the index of a oneof in the containing type's oneof_decl
    // list.  This field is a member of that oneof.
    oneof_index: ?i32,
    // JSON name of this field. The value is set by protocol compiler. If the
    // user has set a "json_name" option on this field, that option's value
    // will be used. Otherwise, it's deduced from the field's name by converting
    // it to camelCase.
    json_name: ?[]const u8,
    options: ?FieldOptions,
    // If true, this is a proto3 "optional". When a proto3 field is optional, it
    // tracks presence regardless of field type.
    //
    // When proto3_optional is true, this field must be belong to a oneof to
    // signal to old proto3 clients that presence is tracked for this field. This
    // oneof is known as a "synthetic" oneof, and this field must be its sole
    // member (each proto3 optional field gets its own synthetic oneof). Synthetic
    // oneofs exist in the descriptor only, and do not generate any API. Synthetic
    // oneofs must be ordered after all "real" oneofs.
    //
    // For message fields, proto3_optional doesn't create any semantic change,
    // since non-repeated message fields always track presence. However it still
    // indicates the semantic detail of whether the user wrote "optional" or not.
    // This can be useful for round-tripping the .proto file. For consistency we
    // give message fields a synthetic oneof also, even though it is not required
    // to track presence. This is especially important because the parser can't
    // tell if a field is a message or an enum, so it must always create a
    // synthetic oneof.
    //
    // Proto2 optional fields do not set this flag, because they already indicate
    // optional with `LABEL_OPTIONAL`.
    proto3_optional: ?bool,
    pub const Type = enum(i32) {
        // 0 is reserved for errors.
        // Order is weird for historical reasons.
        TYPE_DOUBLE = 1,
        TYPE_FLOAT = 2,
        // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
        // negative values are likely.
        TYPE_INT64 = 3,
        TYPE_UINT64 = 4,
        // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
        // negative values are likely.
        TYPE_INT32 = 5,
        TYPE_FIXED64 = 6,
        TYPE_FIXED32 = 7,
        TYPE_BOOL = 8,
        TYPE_STRING = 9,
        // Tag-delimited aggregate.
        // Group type is deprecated and not supported in proto3. However, Proto3
        // implementations should still be able to parse the group wire format and
        // treat group fields as unknown fields.
        TYPE_GROUP = 10,
        TYPE_MESSAGE = 11,
        // New in version 2.
        TYPE_BYTES = 12,
        TYPE_UINT32 = 13,
        TYPE_ENUM = 14,
        TYPE_SFIXED32 = 15,
        TYPE_SFIXED64 = 16,
        TYPE_SINT32 = 17,
        TYPE_SINT64 = 18,
        _,
    };

    pub const Label = enum(i32) {
        // 0 is reserved for errors
        LABEL_OPTIONAL = 1,
        LABEL_REQUIRED = 2,
        LABEL_REPEATED = 3,
        _,
    };

    pub const _desc_table = .{
        .name = fd(1, .String, ?[]const u8),
        .number = fd(3, .{ .Varint = .Simple }, ?i32),
        .label = fd(4, .{ .Varint = .ZigZagOptimized }, ?Label),
        .type = fd(5, .{ .Varint = .ZigZagOptimized }, ?Type),
        .type_name = fd(6, .String, ?[]const u8),
        .extendee = fd(2, .String, ?[]const u8),
        .default_value = fd(7, .String, ?[]const u8),
        .oneof_index = fd(9, .{ .Varint = .Simple }, ?i32),
        .json_name = fd(10, .String, ?[]const u8),
        .options = fd(8, .{ .SubMessage = {} }, ?FieldOptions),
        .proto3_optional = fd(17, .{ .Varint = .Simple }, ?bool),
    };

    pub fn encode(self: FieldDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !FieldDescriptorProto {
        return pb_decode(FieldDescriptorProto, input, allocator);
    }

    pub fn init(allocator: Allocator) FieldDescriptorProto {
        return pb_init(FieldDescriptorProto, allocator);
    }

    pub fn deinit(self: FieldDescriptorProto) void {
        return pb_deinit(self);
    }
};

// Describes a oneof.
pub const OneofDescriptorProto = struct {
    name: ?[]const u8,
    options: ?OneofOptions,

    pub const _desc_table = .{
        .name = fd(1, .String, ?[]const u8),
        .options = fd(2, .{ .SubMessage = {} }, ?OneofOptions),
    };

    pub fn encode(self: OneofDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !OneofDescriptorProto {
        return pb_decode(OneofDescriptorProto, input, allocator);
    }

    pub fn init(allocator: Allocator) OneofDescriptorProto {
        return pb_init(OneofDescriptorProto, allocator);
    }

    pub fn deinit(self: OneofDescriptorProto) void {
        return pb_deinit(self);
    }
};

// Describes an enum type.
pub const EnumDescriptorProto = struct {
    name: ?[]const u8,
    value: ArrayList(EnumValueDescriptorProto),
    options: ?EnumOptions,
    // Range of reserved numeric values. Reserved numeric values may not be used
    // by enum values in the same enum declaration. Reserved ranges may not
    // overlap.
    reserved_range: ArrayList(EnumReservedRange),
    // Reserved enum value names, which may not be reused. A given name may only
    // be reserved once.
    reserved_name: ArrayList([]const u8),
    // Range of reserved numeric values. Reserved values may not be used by
    // entries in the same enum. Reserved ranges may not overlap.
    //
    // Note that this is distinct from DescriptorProto.ReservedRange in that it
    // is inclusive such that it can appropriately represent the entire int32
    // domain.
    pub const EnumReservedRange = struct {
        start: ?i32,
        end: ?i32,

        pub const _desc_table = .{
            .start = fd(1, .{ .Varint = .Simple }, ?i32),
            .end = fd(2, .{ .Varint = .Simple }, ?i32),
        };

        pub fn encode(self: EnumReservedRange, allocator: Allocator) ![]u8 {
            return pb_encode(self, allocator);
        }

        pub fn decode(input: []const u8, allocator: Allocator) !EnumReservedRange {
            return pb_decode(EnumReservedRange, input, allocator);
        }

        pub fn init(allocator: Allocator) EnumReservedRange {
            return pb_init(EnumReservedRange, allocator);
        }

        pub fn deinit(self: EnumReservedRange) void {
            return pb_deinit(self);
        }
    };

    pub const _desc_table = .{
        .name = fd(1, .String, ?[]const u8),
        .value = fd(2, .{ .List = .SubMessage }, ArrayList(EnumValueDescriptorProto)),
        .options = fd(3, .{ .SubMessage = {} }, ?EnumOptions),
        .reserved_range = fd(4, .{ .List = .SubMessage }, ArrayList(EnumReservedRange)),
        .reserved_name = fd(5, .{ .List = .String }, ArrayList([]const u8)),
    };

    pub fn encode(self: EnumDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !EnumDescriptorProto {
        return pb_decode(EnumDescriptorProto, input, allocator);
    }

    pub fn init(allocator: Allocator) EnumDescriptorProto {
        return pb_init(EnumDescriptorProto, allocator);
    }

    pub fn deinit(self: EnumDescriptorProto) void {
        return pb_deinit(self);
    }
};

// Describes a value within an enum.
pub const EnumValueDescriptorProto = struct {
    name: ?[]const u8,
    number: ?i32,
    options: ?EnumValueOptions,

    pub const _desc_table = .{
        .name = fd(1, .String, ?[]const u8),
        .number = fd(2, .{ .Varint = .Simple }, ?i32),
        .options = fd(3, .{ .SubMessage = {} }, ?EnumValueOptions),
    };

    pub fn encode(self: EnumValueDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !EnumValueDescriptorProto {
        return pb_decode(EnumValueDescriptorProto, input, allocator);
    }

    pub fn init(allocator: Allocator) EnumValueDescriptorProto {
        return pb_init(EnumValueDescriptorProto, allocator);
    }

    pub fn deinit(self: EnumValueDescriptorProto) void {
        return pb_deinit(self);
    }
};

// Describes a service.
pub const ServiceDescriptorProto = struct {
    name: ?[]const u8,
    method: ArrayList(MethodDescriptorProto),
    options: ?ServiceOptions,

    pub const _desc_table = .{
        .name = fd(1, .String, ?[]const u8),
        .method = fd(2, .{ .List = .SubMessage }, ArrayList(MethodDescriptorProto)),
        .options = fd(3, .{ .SubMessage = {} }, ?ServiceOptions),
    };

    pub fn encode(self: ServiceDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !ServiceDescriptorProto {
        return pb_decode(ServiceDescriptorProto, input, allocator);
    }

    pub fn init(allocator: Allocator) ServiceDescriptorProto {
        return pb_init(ServiceDescriptorProto, allocator);
    }

    pub fn deinit(self: ServiceDescriptorProto) void {
        return pb_deinit(self);
    }
};

// Describes a method of a service.
pub const MethodDescriptorProto = struct {
    name: ?[]const u8,
    // Input and output type names.  These are resolved in the same way as
    // FieldDescriptorProto.type_name, but must refer to a message type.
    input_type: ?[]const u8,
    output_type: ?[]const u8,
    options: ?MethodOptions,
    // Identifies if client streams multiple client messages
    client_streaming: ?bool,
    // Identifies if server streams multiple server messages
    server_streaming: ?bool,

    pub const _desc_table = .{
        .name = fd(1, .String, ?[]const u8),
        .input_type = fd(2, .String, ?[]const u8),
        .output_type = fd(3, .String, ?[]const u8),
        .options = fd(4, .{ .SubMessage = {} }, ?MethodOptions),
        .client_streaming = fd(5, .{ .Varint = .Simple }, ?bool),
        .server_streaming = fd(6, .{ .Varint = .Simple }, ?bool),
    };

    pub fn encode(self: MethodDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !MethodDescriptorProto {
        return pb_decode(MethodDescriptorProto, input, allocator);
    }

    pub fn init(allocator: Allocator) MethodDescriptorProto {
        return pb_init(MethodDescriptorProto, allocator);
    }

    pub fn deinit(self: MethodDescriptorProto) void {
        return pb_deinit(self);
    }
};

pub const FileOptions = struct {
    // Sets the Java package where classes generated from this .proto will be
    // placed.  By default, the proto package is used, but this is often
    // inappropriate because proto packages do not normally start with backwards
    // domain names.
    java_package: ?[]const u8,
    // Controls the name of the wrapper Java class generated for the .proto file.
    // That class will always contain the .proto file's getDescriptor() method as
    // well as any top-level extensions defined in the .proto file.
    // If java_multiple_files is disabled, then all the other classes from the
    // .proto file will be nested inside the single wrapper outer class.
    java_outer_classname: ?[]const u8,
    // If enabled, then the Java code generator will generate a separate .java
    // file for each top-level message, enum, and service defined in the .proto
    // file.  Thus, these types will *not* be nested inside the wrapper class
    // named by java_outer_classname.  However, the wrapper class will still be
    // generated to contain the file's getDescriptor() method as well as any
    // top-level extensions defined in the file.
    java_multiple_files: ?bool,
    // This option does nothing.
    java_generate_equals_and_hash: ?bool,
    // If set true, then the Java2 code generator will generate code that
    // throws an exception whenever an attempt is made to assign a non-UTF-8
    // byte sequence to a string field.
    // Message reflection will do the same.
    // However, an extension field still accepts non-UTF-8 byte sequences.
    // This option has no effect on when used with the lite runtime.
    java_string_check_utf8: ?bool,
    optimize_for: ?OptimizeMode,
    // Sets the Go package where structs generated from this .proto will be
    // placed. If omitted, the Go package will be derived from the following:
    //   - The basename of the package import path, if provided.
    //   - Otherwise, the package statement in the .proto file, if present.
    //   - Otherwise, the basename of the .proto file, without extension.
    go_package: ?[]const u8,
    // Should generic services be generated in each language?  "Generic" services
    // are not specific to any particular RPC system.  They are generated by the
    // main code generators in each language (without additional plugins).
    // Generic services were the only kind of service generation supported by
    // early versions of google.protobuf.
    //
    // Generic services are now considered deprecated in favor of using plugins
    // that generate code specific to your particular RPC system.  Therefore,
    // these default to false.  Old code which depends on generic services should
    // explicitly set them to true.
    cc_generic_services: ?bool,
    java_generic_services: ?bool,
    py_generic_services: ?bool,
    php_generic_services: ?bool,
    // Is this file deprecated?
    // Depending on the target platform, this can emit Deprecated annotations
    // for everything in the file, or it will be completely ignored; in the very
    // least, this is a formalization for deprecating files.
    deprecated: ?bool,
    // Enables the use of arenas for the proto messages in this file. This applies
    // only to generated classes for C++.
    cc_enable_arenas: ?bool,
    // Sets the objective c class prefix which is prepended to all objective c
    // generated classes from this .proto. There is no default.
    objc_class_prefix: ?[]const u8,
    // Namespace for generated classes; defaults to the package.
    csharp_namespace: ?[]const u8,
    // By default Swift generators will take the proto package and CamelCase it
    // replacing '.' with underscore and use that to prefix the types/symbols
    // defined. When this options is provided, they will use this value instead
    // to prefix the types/symbols defined.
    swift_prefix: ?[]const u8,
    // Sets the php class prefix which is prepended to all php generated classes
    // from this .proto. Default is empty.
    php_class_prefix: ?[]const u8,
    // Use this option to change the namespace of php generated classes. Default
    // is empty. When this option is empty, the package name will be used for
    // determining the namespace.
    php_namespace: ?[]const u8,
    // Use this option to change the namespace of php generated metadata classes.
    // Default is empty. When this option is empty, the proto file name will be
    // used for determining the namespace.
    php_metadata_namespace: ?[]const u8,
    // Use this option to change the package of ruby generated classes. Default
    // is empty. When this option is not set, the package name will be used for
    // determining the ruby package.
    ruby_package: ?[]const u8,
    // The parser stores options it doesn't recognize here.
    // See the documentation for the "Options" section above.
    uninterpreted_option: ArrayList(UninterpretedOption),
    // Generated classes can be optimized for speed or code size.
    pub const OptimizeMode = enum(i32) {
        SPEED = 1,
        // etc.
        CODE_SIZE = 2,
        LITE_RUNTIME = 3,
        _,
    };

    pub const _desc_table = .{
        .java_package = fd(1, .String, ?[]const u8),
        .java_outer_classname = fd(8, .String, ?[]const u8),
        .java_multiple_files = fd(10, .{ .Varint = .Simple }, ?bool),
        .java_generate_equals_and_hash = fd(20, .{ .Varint = .Simple }, ?bool),
        .java_string_check_utf8 = fd(27, .{ .Varint = .Simple }, ?bool),
        .optimize_for = fd(9, .{ .Varint = .ZigZagOptimized }, ?OptimizeMode),
        .go_package = fd(11, .String, ?[]const u8),
        .cc_generic_services = fd(16, .{ .Varint = .Simple }, ?bool),
        .java_generic_services = fd(17, .{ .Varint = .Simple }, ?bool),
        .py_generic_services = fd(18, .{ .Varint = .Simple }, ?bool),
        .php_generic_services = fd(42, .{ .Varint = .Simple }, ?bool),
        .deprecated = fd(23, .{ .Varint = .Simple }, ?bool),
        .cc_enable_arenas = fd(31, .{ .Varint = .Simple }, ?bool),
        .objc_class_prefix = fd(36, .String, ?[]const u8),
        .csharp_namespace = fd(37, .String, ?[]const u8),
        .swift_prefix = fd(39, .String, ?[]const u8),
        .php_class_prefix = fd(40, .String, ?[]const u8),
        .php_namespace = fd(41, .String, ?[]const u8),
        .php_metadata_namespace = fd(44, .String, ?[]const u8),
        .ruby_package = fd(45, .String, ?[]const u8),
        .uninterpreted_option = fd(999, .{ .List = .SubMessage }, ArrayList(UninterpretedOption)),
    };

    pub fn encode(self: FileOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !FileOptions {
        return pb_decode(FileOptions, input, allocator);
    }

    pub fn init(allocator: Allocator) FileOptions {
        return pb_init(FileOptions, allocator);
    }

    pub fn deinit(self: FileOptions) void {
        return pb_deinit(self);
    }
};

pub const MessageOptions = struct {
    // Set true to use the old proto1 MessageSet wire format for extensions.
    // This is provided for backwards-compatibility with the MessageSet wire
    // format.  You should not use this for any other reason:  It's less
    // efficient, has fewer features, and is more complicated.
    //
    // The message must be defined exactly as follows:
    //   message Foo {
    //     option message_set_wire_format = true;
    //     extensions 4 to max;
    //   }
    // Note that the message cannot have any defined fields; MessageSets only
    // have extensions.
    //
    // All extensions of your type must be singular messages; e.g. they cannot
    // be int32s, enums, or repeated messages.
    //
    // Because this is an option, the above two restrictions are not enforced by
    // the protocol compiler.
    message_set_wire_format: ?bool,
    // Disables the generation of the standard "descriptor()" accessor, which can
    // conflict with a field of the same name.  This is meant to make migration
    // from proto1 easier; new code should avoid fields named "descriptor".
    no_standard_descriptor_accessor: ?bool,
    // Is this message deprecated?
    // Depending on the target platform, this can emit Deprecated annotations
    // for the message, or it will be completely ignored; in the very least,
    // this is a formalization for deprecating messages.
    deprecated: ?bool,
    // NOTE: Do not set the option in .proto files. Always use the maps syntax
    // instead. The option should only be implicitly set by the proto compiler
    // parser.
    //
    // Whether the message is an automatically generated map entry type for the
    // maps field.
    //
    // For maps fields:
    //     map<KeyType, ValueType> map_field = 1;
    // The parsed descriptor looks like:
    //     message MapFieldEntry {
    //         option map_entry = true;
    //         optional KeyType key = 1;
    //         optional ValueType value = 2;
    //     }
    //     repeated MapFieldEntry map_field = 1;
    //
    // Implementations may choose not to generate the map_entry=true message, but
    // use a native map in the target language to hold the keys and values.
    // The reflection APIs in such implementations still need to work as
    // if the field is a repeated message field.
    map_entry: ?bool,
    // Enable the legacy handling of JSON field name conflicts.  This lowercases
    // and strips underscored from the fields before comparison in proto3 only.
    // The new behavior takes `json_name` into account and applies to proto2 as
    // well.
    //
    // This should only be used as a temporary measure against broken builds due
    // to the change in behavior for JSON field name conflicts.
    //
    // TODO(b/261750190) This is legacy behavior we plan to remove once downstream
    // teams have had time to migrate.
    deprecated_legacy_json_field_conflicts: ?bool,
    // The parser stores options it doesn't recognize here. See above.
    uninterpreted_option: ArrayList(UninterpretedOption),

    pub const _desc_table = .{
        .message_set_wire_format = fd(1, .{ .Varint = .Simple }, ?bool),
        .no_standard_descriptor_accessor = fd(2, .{ .Varint = .Simple }, ?bool),
        .deprecated = fd(3, .{ .Varint = .Simple }, ?bool),
        .map_entry = fd(7, .{ .Varint = .Simple }, ?bool),
        .deprecated_legacy_json_field_conflicts = fd(11, .{ .Varint = .Simple }, ?bool),
        .uninterpreted_option = fd(999, .{ .List = .SubMessage }, ArrayList(UninterpretedOption)),
    };

    pub fn encode(self: MessageOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !MessageOptions {
        return pb_decode(MessageOptions, input, allocator);
    }

    pub fn init(allocator: Allocator) MessageOptions {
        return pb_init(MessageOptions, allocator);
    }

    pub fn deinit(self: MessageOptions) void {
        return pb_deinit(self);
    }
};

pub const FieldOptions = struct {
    // The ctype option instructs the C++ code generator to use a different
    // representation of the field than it normally would.  See the specific
    // options below.  This option is only implemented to support use of
    // [ctype=CORD] and [ctype=STRING] (the default) on non-repeated fields of
    // type "bytes" in the open source release -- sorry, we'll try to include
    // other types in a future version!
    ctype: ?CType,
    // The packed option can be enabled for repeated primitive fields to enable
    // a more efficient representation on the wire. Rather than repeatedly
    // writing the tag and type for each element, the entire array is encoded as
    // a single length-delimited blob. In proto3, only explicit setting it to
    // false will avoid using packed encoding.
    @"packed": ?bool,
    // The jstype option determines the JavaScript type used for values of the
    // field.  The option is permitted only for 64 bit integral and fixed types
    // (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
    // is represented as JavaScript string, which avoids loss of precision that
    // can happen when a large value is converted to a floating point JavaScript.
    // Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
    // use the JavaScript "number" type.  The behavior of the default option
    // JS_NORMAL is implementation dependent.
    //
    // This option is an enum to permit additional types to be added, e.g.
    // goog.math.Integer.
    jstype: ?JSType,
    // Should this field be parsed lazily?  Lazy applies only to message-type
    // fields.  It means that when the outer message is initially parsed, the
    // inner message's contents will not be parsed but instead stored in encoded
    // form.  The inner message will actually be parsed when it is first accessed.
    //
    // This is only a hint.  Implementations are free to choose whether to use
    // eager or lazy parsing regardless of the value of this option.  However,
    // setting this option true suggests that the protocol author believes that
    // using lazy parsing on this field is worth the additional bookkeeping
    // overhead typically needed to implement it.
    //
    // This option does not affect the public interface of any generated code;
    // all method signatures remain the same.  Furthermore, thread-safety of the
    // interface is not affected by this option; const methods remain safe to
    // call from multiple threads concurrently, while non-const methods continue
    // to require exclusive access.
    //
    // Note that implementations may choose not to check required fields within
    // a lazy sub-message.  That is, calling IsInitialized() on the outer message
    // may return true even if the inner message has missing required fields.
    // This is necessary because otherwise the inner message would have to be
    // parsed in order to perform the check, defeating the purpose of lazy
    // parsing.  An implementation which chooses not to check required fields
    // must be consistent about it.  That is, for any particular sub-message, the
    // implementation must either *always* check its required fields, or *never*
    // check its required fields, regardless of whether or not the message has
    // been parsed.
    //
    // As of May 2022, lazy verifies the contents of the byte stream during
    // parsing.  An invalid byte stream will cause the overall parsing to fail.
    lazy: ?bool,
    // unverified_lazy does no correctness checks on the byte stream. This should
    // only be used where lazy with verification is prohibitive for performance
    // reasons.
    unverified_lazy: ?bool,
    // Is this field deprecated?
    // Depending on the target platform, this can emit Deprecated annotations
    // for accessors, or it will be completely ignored; in the very least, this
    // is a formalization for deprecating fields.
    deprecated: ?bool,
    // For Google-internal migration only. Do not use.
    weak: ?bool,
    // Indicate that the field value should not be printed out when using debug
    // formats, e.g. when the field contains sensitive credentials.
    debug_redact: ?bool,
    retention: ?OptionRetention,
    target: ?OptionTargetType,
    targets: ArrayList(OptionTargetType),
    // The parser stores options it doesn't recognize here. See above.
    uninterpreted_option: ArrayList(UninterpretedOption),
    pub const CType = enum(i32) {
        // Default mode.
        STRING = 0,
        // The option [ctype=CORD] may be applied to a non-repeated field of type
        // "bytes". It indicates that in C++, the data should be stored in a Cord
        // instead of a string.  For very large strings, this may reduce memory
        // fragmentation. It may also allow better performance when parsing from a
        // Cord, or when parsing with aliasing enabled, as the parsed Cord may then
        // alias the original buffer.
        CORD = 1,
        STRING_PIECE = 2,
        _,
    };

    pub const JSType = enum(i32) {
        // Use the default type.
        JS_NORMAL = 0,
        // Use JavaScript strings.
        JS_STRING = 1,
        // Use JavaScript numbers.
        JS_NUMBER = 2,
        _,
    };

    // If set to RETENTION_SOURCE, the option will be omitted from the binary.
    // Note: as of January 2023, support for this is in progress and does not yet
    // have an effect (b/264593489).
    pub const OptionRetention = enum(i32) {
        RETENTION_UNKNOWN = 0,
        RETENTION_RUNTIME = 1,
        RETENTION_SOURCE = 2,
        _,
    };

    // This indicates the types of entities that the field may apply to when used
    // as an option. If it is unset, then the field may be freely used as an
    // option on any kind of entity. Note: as of January 2023, support for this is
    // in progress and does not yet have an effect (b/264593489).
    pub const OptionTargetType = enum(i32) {
        TARGET_TYPE_UNKNOWN = 0,
        TARGET_TYPE_FILE = 1,
        TARGET_TYPE_EXTENSION_RANGE = 2,
        TARGET_TYPE_MESSAGE = 3,
        TARGET_TYPE_FIELD = 4,
        TARGET_TYPE_ONEOF = 5,
        TARGET_TYPE_ENUM = 6,
        TARGET_TYPE_ENUM_ENTRY = 7,
        TARGET_TYPE_SERVICE = 8,
        TARGET_TYPE_METHOD = 9,
        _,
    };

    pub const _desc_table = .{
        .ctype = fd(1, .{ .Varint = .ZigZagOptimized }, ?CType),
        .@"packed" = fd(2, .{ .Varint = .Simple }, ?bool),
        .jstype = fd(6, .{ .Varint = .ZigZagOptimized }, ?JSType),
        .lazy = fd(5, .{ .Varint = .Simple }, ?bool),
        .unverified_lazy = fd(15, .{ .Varint = .Simple }, ?bool),
        .deprecated = fd(3, .{ .Varint = .Simple }, ?bool),
        .weak = fd(10, .{ .Varint = .Simple }, ?bool),
        .debug_redact = fd(16, .{ .Varint = .Simple }, ?bool),
        .retention = fd(17, .{ .Varint = .ZigZagOptimized }, ?OptionRetention),
        .target = fd(18, .{ .Varint = .ZigZagOptimized }, ?OptionTargetType),
        .targets = fd(19, .{ .List = .{ .Varint = .ZigZagOptimized } }, ArrayList(OptionTargetType)),
        .uninterpreted_option = fd(999, .{ .List = .SubMessage }, ArrayList(UninterpretedOption)),
    };

    pub fn encode(self: FieldOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !FieldOptions {
        return pb_decode(FieldOptions, input, allocator);
    }

    pub fn init(allocator: Allocator) FieldOptions {
        return pb_init(FieldOptions, allocator);
    }

    pub fn deinit(self: FieldOptions) void {
        return pb_deinit(self);
    }
};

pub const OneofOptions = struct {
    // The parser stores options it doesn't recognize here. See above.
    uninterpreted_option: ArrayList(UninterpretedOption),

    pub const _desc_table = .{
        .uninterpreted_option = fd(999, .{ .List = .SubMessage }, ArrayList(UninterpretedOption)),
    };

    pub fn encode(self: OneofOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !OneofOptions {
        return pb_decode(OneofOptions, input, allocator);
    }

    pub fn init(allocator: Allocator) OneofOptions {
        return pb_init(OneofOptions, allocator);
    }

    pub fn deinit(self: OneofOptions) void {
        return pb_deinit(self);
    }
};

pub const EnumOptions = struct {
    // Set this option to true to allow mapping different tag names to the same
    // value.
    allow_alias: ?bool,
    // Is this enum deprecated?
    // Depending on the target platform, this can emit Deprecated annotations
    // for the enum, or it will be completely ignored; in the very least, this
    // is a formalization for deprecating enums.
    deprecated: ?bool,
    // Enable the legacy handling of JSON field name conflicts.  This lowercases
    // and strips underscored from the fields before comparison in proto3 only.
    // The new behavior takes `json_name` into account and applies to proto2 as
    // well.
    // TODO(b/261750190) Remove this legacy behavior once downstream teams have
    // had time to migrate.
    deprecated_legacy_json_field_conflicts: ?bool,
    // The parser stores options it doesn't recognize here. See above.
    uninterpreted_option: ArrayList(UninterpretedOption),

    pub const _desc_table = .{
        .allow_alias = fd(2, .{ .Varint = .Simple }, ?bool),
        .deprecated = fd(3, .{ .Varint = .Simple }, ?bool),
        .deprecated_legacy_json_field_conflicts = fd(6, .{ .Varint = .Simple }, ?bool),
        .uninterpreted_option = fd(999, .{ .List = .SubMessage }, ArrayList(UninterpretedOption)),
    };

    pub fn encode(self: EnumOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !EnumOptions {
        return pb_decode(EnumOptions, input, allocator);
    }

    pub fn init(allocator: Allocator) EnumOptions {
        return pb_init(EnumOptions, allocator);
    }

    pub fn deinit(self: EnumOptions) void {
        return pb_deinit(self);
    }
};

pub const EnumValueOptions = struct {
    // Is this enum value deprecated?
    // Depending on the target platform, this can emit Deprecated annotations
    // for the enum value, or it will be completely ignored; in the very least,
    // this is a formalization for deprecating enum values.
    deprecated: ?bool,
    // The parser stores options it doesn't recognize here. See above.
    uninterpreted_option: ArrayList(UninterpretedOption),

    pub const _desc_table = .{
        .deprecated = fd(1, .{ .Varint = .Simple }, ?bool),
        .uninterpreted_option = fd(999, .{ .List = .SubMessage }, ArrayList(UninterpretedOption)),
    };

    pub fn encode(self: EnumValueOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !EnumValueOptions {
        return pb_decode(EnumValueOptions, input, allocator);
    }

    pub fn init(allocator: Allocator) EnumValueOptions {
        return pb_init(EnumValueOptions, allocator);
    }

    pub fn deinit(self: EnumValueOptions) void {
        return pb_deinit(self);
    }
};

pub const ServiceOptions = struct {
    // Is this service deprecated?
    // Depending on the target platform, this can emit Deprecated annotations
    // for the service, or it will be completely ignored; in the very least,
    // this is a formalization for deprecating services.
    deprecated: ?bool,
    // The parser stores options it doesn't recognize here. See above.
    uninterpreted_option: ArrayList(UninterpretedOption),

    pub const _desc_table = .{
        .deprecated = fd(33, .{ .Varint = .Simple }, ?bool),
        .uninterpreted_option = fd(999, .{ .List = .SubMessage }, ArrayList(UninterpretedOption)),
    };

    pub fn encode(self: ServiceOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !ServiceOptions {
        return pb_decode(ServiceOptions, input, allocator);
    }

    pub fn init(allocator: Allocator) ServiceOptions {
        return pb_init(ServiceOptions, allocator);
    }

    pub fn deinit(self: ServiceOptions) void {
        return pb_deinit(self);
    }
};

pub const MethodOptions = struct {
    // Is this method deprecated?
    // Depending on the target platform, this can emit Deprecated annotations
    // for the method, or it will be completely ignored; in the very least,
    // this is a formalization for deprecating methods.
    deprecated: ?bool,
    idempotency_level: ?IdempotencyLevel,
    // The parser stores options it doesn't recognize here. See above.
    uninterpreted_option: ArrayList(UninterpretedOption),
    // Is this method side-effect-free (or safe in HTTP parlance), or idempotent,
    // or neither? HTTP based RPC implementation may choose GET verb for safe
    // methods, and PUT verb for idempotent methods instead of the default POST.
    pub const IdempotencyLevel = enum(i32) {
        IDEMPOTENCY_UNKNOWN = 0,
        NO_SIDE_EFFECTS = 1,
        IDEMPOTENT = 2,
        _,
    };

    pub const _desc_table = .{
        .deprecated = fd(33, .{ .Varint = .Simple }, ?bool),
        .idempotency_level = fd(34, .{ .Varint = .ZigZagOptimized }, ?IdempotencyLevel),
        .uninterpreted_option = fd(999, .{ .List = .SubMessage }, ArrayList(UninterpretedOption)),
    };

    pub fn encode(self: MethodOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !MethodOptions {
        return pb_decode(MethodOptions, input, allocator);
    }

    pub fn init(allocator: Allocator) MethodOptions {
        return pb_init(MethodOptions, allocator);
    }

    pub fn deinit(self: MethodOptions) void {
        return pb_deinit(self);
    }
};

// A message representing a option the parser does not recognize. This only
// appears in options protos created by the compiler::Parser class.
// DescriptorPool resolves these when building Descriptor objects. Therefore,
// options protos in descriptor objects (e.g. returned by Descriptor::options(),
// or produced by Descriptor::CopyTo()) will never have UninterpretedOptions
// in them.
pub const UninterpretedOption = struct {
    name: ArrayList(NamePart),
    // The value of the uninterpreted option, in whatever type the tokenizer
    // identified it as during parsing. Exactly one of these should be set.
    identifier_value: ?[]const u8,
    positive_int_value: ?u64,
    negative_int_value: ?i64,
    double_value: ?f64,
    string_value: ?[]const u8,
    aggregate_value: ?[]const u8,
    // The name of the uninterpreted option.  Each string represents a segment in
    // a dot-separated name.  is_extension is true iff a segment represents an
    // extension (denoted with parentheses in options specs in .proto files).
    // E.g.,{ ["foo", false], ["bar.baz", true], ["moo", false] } represents
    // "foo.(bar.baz).moo".
    pub const NamePart = struct {
        name_part: ?[]const u8,
        is_extension: bool,

        pub const _desc_table = .{
            .name_part = fd(1, .String, ?[]const u8),
            .is_extension = fd(2, .{ .Varint = .Simple }, bool),
        };

        pub fn encode(self: NamePart, allocator: Allocator) ![]u8 {
            return pb_encode(self, allocator);
        }

        pub fn decode(input: []const u8, allocator: Allocator) !NamePart {
            return pb_decode(NamePart, input, allocator);
        }

        pub fn init(allocator: Allocator) NamePart {
            return pb_init(NamePart, allocator);
        }

        pub fn deinit(self: NamePart) void {
            return pb_deinit(self);
        }
    };

    pub const _desc_table = .{
        .name = fd(2, .{ .List = .SubMessage }, ArrayList(NamePart)),
        .identifier_value = fd(3, .String, ?[]const u8),
        .positive_int_value = fd(4, .{ .Varint = .Simple }, ?u64),
        .negative_int_value = fd(5, .FixedInt, ?i64),
        .double_value = fd(6, .FixedInt, ?f64),
        .string_value = fd(7, .String, ?[]const u8),
        .aggregate_value = fd(8, .String, ?[]const u8),
    };

    pub fn encode(self: UninterpretedOption, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !UninterpretedOption {
        return pb_decode(UninterpretedOption, input, allocator);
    }

    pub fn init(allocator: Allocator) UninterpretedOption {
        return pb_init(UninterpretedOption, allocator);
    }

    pub fn deinit(self: UninterpretedOption) void {
        return pb_deinit(self);
    }
};

// Encapsulates information about the original source file from which a
// FileDescriptorProto was generated.
pub const SourceCodeInfo = struct {
    // A Location identifies a piece of source code in a .proto file which
    // corresponds to a particular definition.  This information is intended
    // to be useful to IDEs, code indexers, documentation generators, and similar
    // tools.
    //
    // For example, say we have a file like:
    //   message Foo {
    //     optional string foo = 1;
    //   }
    // Let's look at just the field definition:
    //   optional string foo = 1;
    //   ^       ^^     ^^  ^  ^^^
    //   a       bc     de  f  ghi
    // We have the following locations:
    //   span   path               represents
    //   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.
    //   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).
    //   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).
    //   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).
    //   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).
    //
    // Notes:
    // - A location may refer to a repeated field itself (i.e. not to any
    //   particular index within it).  This is used whenever a set of elements are
    //   logically enclosed in a single code segment.  For example, an entire
    //   extend block (possibly containing multiple extension definitions) will
    //   have an outer location whose path refers to the "extensions" repeated
    //   field without an index.
    // - Multiple locations may have the same path.  This happens when a single
    //   logical declaration is spread out across multiple places.  The most
    //   obvious example is the "extend" block again -- there may be multiple
    //   extend blocks in the same scope, each of which will have the same path.
    // - A location's span is not always a subset of its parent's span.  For
    //   example, the "extendee" of an extension declaration appears at the
    //   beginning of the "extend" block and is shared by all extensions within
    //   the block.
    // - Just because a location's span is a subset of some other location's span
    //   does not mean that it is a descendant.  For example, a "group" defines
    //   both a type and a field in a single declaration.  Thus, the locations
    //   corresponding to the type and field and their components will overlap.
    // - Code which tries to interpret locations should probably be designed to
    //   ignore those that it doesn't understand, as more types of locations could
    //   be recorded in the future.
    location: ArrayList(Location),
    pub const Location = struct {
        // Identifies which part of the FileDescriptorProto was defined at this
        // location.
        //
        // Each element is a field number or an index.  They form a path from
        // the root FileDescriptorProto to the place where the definition occurs.
        // For example, this path:
        //   [ 4, 3, 2, 7, 1 ]
        // refers to:
        //   file.message_type(3)  // 4, 3
        //       .field(7)         // 2, 7
        //       .name()           // 1
        // This is because FileDescriptorProto.message_type has field number 4:
        //   repeated DescriptorProto message_type = 4;
        // and DescriptorProto.field has field number 2:
        //   repeated FieldDescriptorProto field = 2;
        // and FieldDescriptorProto.name has field number 1:
        //   optional string name = 1;
        //
        // Thus, the above path gives the location of a field name.  If we removed
        // the last element:
        //   [ 4, 3, 2, 7 ]
        // this path refers to the whole field declaration (from the beginning
        // of the label to the terminating semicolon).
        path: ArrayList(i32),
        // Always has exactly three or four elements: start line, start column,
        // end line (optional, otherwise assumed same as start line), end column.
        // These are packed into a single field for efficiency.  Note that line
        // and column numbers are zero-based -- typically you will want to add
        // 1 to each before displaying to a user.
        span: ArrayList(i32),
        // If this SourceCodeInfo represents a complete declaration, these are any
        // comments appearing before and after the declaration which appear to be
        // attached to the declaration.
        //
        // A series of line comments appearing on consecutive lines, with no other
        // tokens appearing on those lines, will be treated as a single comment.
        //
        // leading_detached_comments will keep paragraphs of comments that appear
        // before (but not connected to) the current element. Each paragraph,
        // separated by empty lines, will be one comment element in the repeated
        // field.
        //
        // Only the comment content is provided; comment markers (e.g. //) are
        // stripped out.  For block comments, leading whitespace and an asterisk
        // will be stripped from the beginning of each line other than the first.
        // Newlines are included in the output.
        //
        // Examples:
        //
        //   optional int32 foo = 1;  // Comment attached to foo.
        //   // Comment attached to bar.
        //   optional int32 bar = 2;
        //
        //   optional string baz = 3;
        //   // Comment attached to baz.
        //   // Another line attached to baz.
        //
        //   // Comment attached to moo.
        //   //
        //   // Another line attached to moo.
        //   optional double moo = 4;
        //
        //   // Detached comment for corge. This is not leading or trailing comments
        //   // to moo or corge because there are blank lines separating it from
        //   // both.
        //
        //   // Detached comment for corge paragraph 2.
        //
        //   optional string corge = 5;
        //   /* Block comment attached
        //    * to corge.  Leading asterisks
        //    * will be removed. */
        //   /* Block comment attached to
        //    * grault. */
        //   optional int32 grault = 6;
        //
        //   // ignored detached comments.
        leading_comments: ?[]const u8,
        trailing_comments: ?[]const u8,
        leading_detached_comments: ArrayList([]const u8),

        pub const _desc_table = .{
            .path = fd(1, .{ .PackedList = .{ .Varint = .Simple } }, ArrayList(i32)),
            .span = fd(2, .{ .PackedList = .{ .Varint = .Simple } }, ArrayList(i32)),
            .leading_comments = fd(3, .String, ?[]const u8),
            .trailing_comments = fd(4, .String, ?[]const u8),
            .leading_detached_comments = fd(6, .{ .List = .String }, ArrayList([]const u8)),
        };

        pub fn encode(self: Location, allocator: Allocator) ![]u8 {
            return pb_encode(self, allocator);
        }

        pub fn decode(input: []const u8, allocator: Allocator) !Location {
            return pb_decode(Location, input, allocator);
        }

        pub fn init(allocator: Allocator) Location {
            return pb_init(Location, allocator);
        }

        pub fn deinit(self: Location) void {
            return pb_deinit(self);
        }
    };

    pub const _desc_table = .{
        .location = fd(1, .{ .List = .SubMessage }, ArrayList(Location)),
    };

    pub fn encode(self: SourceCodeInfo, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !SourceCodeInfo {
        return pb_decode(SourceCodeInfo, input, allocator);
    }

    pub fn init(allocator: Allocator) SourceCodeInfo {
        return pb_init(SourceCodeInfo, allocator);
    }

    pub fn deinit(self: SourceCodeInfo) void {
        return pb_deinit(self);
    }
};

// Describes the relationship between generated code and its original source
// file. A GeneratedCodeInfo message is associated with only one generated
// source file, but may contain references to different source .proto files.
pub const GeneratedCodeInfo = struct {
    // An Annotation connects some span of text in generated code to an element
    // of its generating .proto file.
    annotation: ArrayList(Annotation),
    pub const Annotation = struct {
        // Identifies the element in the original source .proto file. This field
        // is formatted the same as SourceCodeInfo.Location.path.
        path: ArrayList(i32),
        // Identifies the filesystem path to the original source .proto.
        source_file: ?[]const u8,
        // Identifies the starting offset in bytes in the generated code
        // that relates to the identified object.
        begin: ?i32,
        // Identifies the ending offset in bytes in the generated code that
        // relates to the identified object. The end offset should be one past
        // the last relevant byte (so the length of the text = end - begin).
        end: ?i32,
        semantic: ?Semantic,
        // Represents the identified object's effect on the element in the original
        // .proto file.
        pub const Semantic = enum(i32) {
            // There is no effect or the effect is indescribable.
            NONE = 0,
            // The element is set or otherwise mutated.
            SET = 1,
            // An alias to the element is returned.
            ALIAS = 2,
            _,
        };

        pub const _desc_table = .{
            .path = fd(1, .{ .PackedList = .{ .Varint = .Simple } }, ArrayList(i32)),
            .source_file = fd(2, .String, ?[]const u8),
            .begin = fd(3, .{ .Varint = .Simple }, ?i32),
            .end = fd(4, .{ .Varint = .Simple }, ?i32),
            .semantic = fd(5, .{ .Varint = .ZigZagOptimized }, ?Semantic),
        };

        pub fn encode(self: Annotation, allocator: Allocator) ![]u8 {
            return pb_encode(self, allocator);
        }

        pub fn decode(input: []const u8, allocator: Allocator) !Annotation {
            return pb_decode(Annotation, input, allocator);
        }

        pub fn init(allocator: Allocator) Annotation {
            return pb_init(Annotation, allocator);
        }

        pub fn deinit(self: Annotation) void {
            return pb_deinit(self);
        }
    };

    pub const _desc_table = .{
        .annotation = fd(1, .{ .List = .SubMessage }, ArrayList(Annotation)),
    };

    pub fn encode(self: GeneratedCodeInfo, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }

    pub fn decode(input: []const u8, allocator: Allocator) !GeneratedCodeInfo {
        return pb_decode(GeneratedCodeInfo, input, allocator);
    }

    pub fn init(allocator: Allocator) GeneratedCodeInfo {
        return pb_init(GeneratedCodeInfo, allocator);
    }

    pub fn deinit(self: GeneratedCodeInfo) void {
        return pb_deinit(self);
    }
};
