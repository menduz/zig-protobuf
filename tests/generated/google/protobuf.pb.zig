// Code generated by protoc-gen-zig
///! package google.protobuf
const std = @import("std");
const mem = std.mem;
const Allocator = mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const pb_decode = protobuf.pb_decode;
const pb_encode = protobuf.pb_encode;
const pb_deinit = protobuf.pb_deinit;
const pb_init = protobuf.pb_init;
const fd = protobuf.fd;

pub const FileDescriptorSet = struct {
    file: ArrayList(FileDescriptorProto),

    pub const _desc_table = .{
        .file = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub fn encode(self: FileDescriptorSet, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !FileDescriptorSet {
        return pb_decode(FileDescriptorSet, input, allocator);
    }
    pub fn init(allocator: Allocator) FileDescriptorSet {
        return pb_init(FileDescriptorSet, allocator);
    }
    pub fn deinit(self: FileDescriptorSet) void {
        return pb_deinit(self);
    }
};

pub const FileDescriptorProto = struct {
    name: ?[]const u8,
    package: ?[]const u8,
    dependency: ArrayList([]const u8),
    public_dependency: ArrayList(i32),
    weak_dependency: ArrayList(i32),
    message_type: ArrayList(DescriptorProto),
    enum_type: ArrayList(EnumDescriptorProto),
    service: ArrayList(ServiceDescriptorProto),
    extension: ArrayList(FieldDescriptorProto),
    options: ?FileOptions,
    source_code_info: ?SourceCodeInfo,
    syntax: ?[]const u8,
    edition: ?[]const u8,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .package = fd(2, .String),
        .dependency = fd(3, .{ .List = .String }),
        .public_dependency = fd(10, .{ .List = .{ .Varint = .Simple } }),
        .weak_dependency = fd(11, .{ .List = .{ .Varint = .Simple } }),
        .message_type = fd(4, .{ .List = .{ .SubMessage = {} } }),
        .enum_type = fd(5, .{ .List = .{ .SubMessage = {} } }),
        .service = fd(6, .{ .List = .{ .SubMessage = {} } }),
        .extension = fd(7, .{ .List = .{ .SubMessage = {} } }),
        .options = fd(8, .{ .SubMessage = {} }),
        .source_code_info = fd(9, .{ .SubMessage = {} }),
        .syntax = fd(12, .String),
        .edition = fd(13, .String),
    };

    pub fn encode(self: FileDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !FileDescriptorProto {
        return pb_decode(FileDescriptorProto, input, allocator);
    }
    pub fn init(allocator: Allocator) FileDescriptorProto {
        return pb_init(FileDescriptorProto, allocator);
    }
    pub fn deinit(self: FileDescriptorProto) void {
        return pb_deinit(self);
    }
};

pub const DescriptorProto = struct {
    name: ?[]const u8,
    field: ArrayList(FieldDescriptorProto),
    extension: ArrayList(FieldDescriptorProto),
    nested_type: ArrayList(DescriptorProto),
    enum_type: ArrayList(EnumDescriptorProto),
    extension_range: ArrayList(ExtensionRange),
    oneof_decl: ArrayList(OneofDescriptorProto),
    options: ?MessageOptions,
    reserved_range: ArrayList(ReservedRange),
    reserved_name: ArrayList([]const u8),

    pub const _desc_table = .{
        .name = fd(1, .String),
        .field = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .extension = fd(6, .{ .List = .{ .SubMessage = {} } }),
        .nested_type = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .enum_type = fd(4, .{ .List = .{ .SubMessage = {} } }),
        .extension_range = fd(5, .{ .List = .{ .SubMessage = {} } }),
        .oneof_decl = fd(8, .{ .List = .{ .SubMessage = {} } }),
        .options = fd(7, .{ .SubMessage = {} }),
        .reserved_range = fd(9, .{ .List = .{ .SubMessage = {} } }),
        .reserved_name = fd(10, .{ .List = .String }),
    };

    pub const ExtensionRange = struct {
        start: ?i32,
        end: ?i32,
        options: ?ExtensionRangeOptions,

        pub const _desc_table = .{
            .start = fd(1, .{ .Varint = .Simple }),
            .end = fd(2, .{ .Varint = .Simple }),
            .options = fd(3, .{ .SubMessage = {} }),
        };

        pub fn encode(self: ExtensionRange, allocator: Allocator) ![]u8 {
            return pb_encode(self, allocator);
        }
        pub fn decode(input: []const u8, allocator: Allocator) !ExtensionRange {
            return pb_decode(ExtensionRange, input, allocator);
        }
        pub fn init(allocator: Allocator) ExtensionRange {
            return pb_init(ExtensionRange, allocator);
        }
        pub fn deinit(self: ExtensionRange) void {
            return pb_deinit(self);
        }
    };

    pub const ReservedRange = struct {
        start: ?i32,
        end: ?i32,

        pub const _desc_table = .{
            .start = fd(1, .{ .Varint = .Simple }),
            .end = fd(2, .{ .Varint = .Simple }),
        };

        pub fn encode(self: ReservedRange, allocator: Allocator) ![]u8 {
            return pb_encode(self, allocator);
        }
        pub fn decode(input: []const u8, allocator: Allocator) !ReservedRange {
            return pb_decode(ReservedRange, input, allocator);
        }
        pub fn init(allocator: Allocator) ReservedRange {
            return pb_init(ReservedRange, allocator);
        }
        pub fn deinit(self: ReservedRange) void {
            return pb_deinit(self);
        }
    };

    pub fn encode(self: DescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !DescriptorProto {
        return pb_decode(DescriptorProto, input, allocator);
    }
    pub fn init(allocator: Allocator) DescriptorProto {
        return pb_init(DescriptorProto, allocator);
    }
    pub fn deinit(self: DescriptorProto) void {
        return pb_deinit(self);
    }
};

pub const ExtensionRangeOptions = struct {
    uninterpreted_option: ArrayList(UninterpretedOption),
    declaration: ArrayList(Declaration),
    verification: ?VerificationState,

    pub const _desc_table = .{
        .uninterpreted_option = fd(999, .{ .List = .{ .SubMessage = {} } }),
        .declaration = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .verification = fd(3, .{ .Varint = .Simple }),
    };

    pub const VerificationState = enum(i32) {
        DECLARATION = 0,
        UNVERIFIED = 1,
        _,
    };

    pub const Declaration = struct {
        number: ?i32,
        full_name: ?[]const u8,
        type: ?[]const u8,
        is_repeated: ?bool,
        reserved: ?bool,
        repeated: ?bool,

        pub const _desc_table = .{
            .number = fd(1, .{ .Varint = .Simple }),
            .full_name = fd(2, .String),
            .type = fd(3, .String),
            .is_repeated = fd(4, .{ .Varint = .Simple }),
            .reserved = fd(5, .{ .Varint = .Simple }),
            .repeated = fd(6, .{ .Varint = .Simple }),
        };

        pub fn encode(self: Declaration, allocator: Allocator) ![]u8 {
            return pb_encode(self, allocator);
        }
        pub fn decode(input: []const u8, allocator: Allocator) !Declaration {
            return pb_decode(Declaration, input, allocator);
        }
        pub fn init(allocator: Allocator) Declaration {
            return pb_init(Declaration, allocator);
        }
        pub fn deinit(self: Declaration) void {
            return pb_deinit(self);
        }
    };

    pub fn encode(self: ExtensionRangeOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !ExtensionRangeOptions {
        return pb_decode(ExtensionRangeOptions, input, allocator);
    }
    pub fn init(allocator: Allocator) ExtensionRangeOptions {
        return pb_init(ExtensionRangeOptions, allocator);
    }
    pub fn deinit(self: ExtensionRangeOptions) void {
        return pb_deinit(self);
    }
};

pub const FieldDescriptorProto = struct {
    name: ?[]const u8,
    number: ?i32,
    label: ?Label,
    type: ?Type,
    type_name: ?[]const u8,
    extendee: ?[]const u8,
    default_value: ?[]const u8,
    oneof_index: ?i32,
    json_name: ?[]const u8,
    options: ?FieldOptions,
    proto3_optional: ?bool,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .number = fd(3, .{ .Varint = .Simple }),
        .label = fd(4, .{ .Varint = .Simple }),
        .type = fd(5, .{ .Varint = .Simple }),
        .type_name = fd(6, .String),
        .extendee = fd(2, .String),
        .default_value = fd(7, .String),
        .oneof_index = fd(9, .{ .Varint = .Simple }),
        .json_name = fd(10, .String),
        .options = fd(8, .{ .SubMessage = {} }),
        .proto3_optional = fd(17, .{ .Varint = .Simple }),
    };

    pub const Type = enum(i32) {
        TYPE_DOUBLE = 1,
        TYPE_FLOAT = 2,
        TYPE_INT64 = 3,
        TYPE_UINT64 = 4,
        TYPE_INT32 = 5,
        TYPE_FIXED64 = 6,
        TYPE_FIXED32 = 7,
        TYPE_BOOL = 8,
        TYPE_STRING = 9,
        TYPE_GROUP = 10,
        TYPE_MESSAGE = 11,
        TYPE_BYTES = 12,
        TYPE_UINT32 = 13,
        TYPE_ENUM = 14,
        TYPE_SFIXED32 = 15,
        TYPE_SFIXED64 = 16,
        TYPE_SINT32 = 17,
        TYPE_SINT64 = 18,
        _,
    };

    pub const Label = enum(i32) {
        LABEL_OPTIONAL = 1,
        LABEL_REQUIRED = 2,
        LABEL_REPEATED = 3,
        _,
    };

    pub fn encode(self: FieldDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !FieldDescriptorProto {
        return pb_decode(FieldDescriptorProto, input, allocator);
    }
    pub fn init(allocator: Allocator) FieldDescriptorProto {
        return pb_init(FieldDescriptorProto, allocator);
    }
    pub fn deinit(self: FieldDescriptorProto) void {
        return pb_deinit(self);
    }
};

pub const OneofDescriptorProto = struct {
    name: ?[]const u8,
    options: ?OneofOptions,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .options = fd(2, .{ .SubMessage = {} }),
    };

    pub fn encode(self: OneofDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !OneofDescriptorProto {
        return pb_decode(OneofDescriptorProto, input, allocator);
    }
    pub fn init(allocator: Allocator) OneofDescriptorProto {
        return pb_init(OneofDescriptorProto, allocator);
    }
    pub fn deinit(self: OneofDescriptorProto) void {
        return pb_deinit(self);
    }
};

pub const EnumDescriptorProto = struct {
    name: ?[]const u8,
    value: ArrayList(EnumValueDescriptorProto),
    options: ?EnumOptions,
    reserved_range: ArrayList(EnumReservedRange),
    reserved_name: ArrayList([]const u8),

    pub const _desc_table = .{
        .name = fd(1, .String),
        .value = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .options = fd(3, .{ .SubMessage = {} }),
        .reserved_range = fd(4, .{ .List = .{ .SubMessage = {} } }),
        .reserved_name = fd(5, .{ .List = .String }),
    };

    pub const EnumReservedRange = struct {
        start: ?i32,
        end: ?i32,

        pub const _desc_table = .{
            .start = fd(1, .{ .Varint = .Simple }),
            .end = fd(2, .{ .Varint = .Simple }),
        };

        pub fn encode(self: EnumReservedRange, allocator: Allocator) ![]u8 {
            return pb_encode(self, allocator);
        }
        pub fn decode(input: []const u8, allocator: Allocator) !EnumReservedRange {
            return pb_decode(EnumReservedRange, input, allocator);
        }
        pub fn init(allocator: Allocator) EnumReservedRange {
            return pb_init(EnumReservedRange, allocator);
        }
        pub fn deinit(self: EnumReservedRange) void {
            return pb_deinit(self);
        }
    };

    pub fn encode(self: EnumDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !EnumDescriptorProto {
        return pb_decode(EnumDescriptorProto, input, allocator);
    }
    pub fn init(allocator: Allocator) EnumDescriptorProto {
        return pb_init(EnumDescriptorProto, allocator);
    }
    pub fn deinit(self: EnumDescriptorProto) void {
        return pb_deinit(self);
    }
};

pub const EnumValueDescriptorProto = struct {
    name: ?[]const u8,
    number: ?i32,
    options: ?EnumValueOptions,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .number = fd(2, .{ .Varint = .Simple }),
        .options = fd(3, .{ .SubMessage = {} }),
    };

    pub fn encode(self: EnumValueDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !EnumValueDescriptorProto {
        return pb_decode(EnumValueDescriptorProto, input, allocator);
    }
    pub fn init(allocator: Allocator) EnumValueDescriptorProto {
        return pb_init(EnumValueDescriptorProto, allocator);
    }
    pub fn deinit(self: EnumValueDescriptorProto) void {
        return pb_deinit(self);
    }
};

pub const ServiceDescriptorProto = struct {
    name: ?[]const u8,
    method: ArrayList(MethodDescriptorProto),
    options: ?ServiceOptions,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .method = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .options = fd(3, .{ .SubMessage = {} }),
    };

    pub fn encode(self: ServiceDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !ServiceDescriptorProto {
        return pb_decode(ServiceDescriptorProto, input, allocator);
    }
    pub fn init(allocator: Allocator) ServiceDescriptorProto {
        return pb_init(ServiceDescriptorProto, allocator);
    }
    pub fn deinit(self: ServiceDescriptorProto) void {
        return pb_deinit(self);
    }
};

pub const MethodDescriptorProto = struct {
    name: ?[]const u8,
    input_type: ?[]const u8,
    output_type: ?[]const u8,
    options: ?MethodOptions,
    client_streaming: ?bool,
    server_streaming: ?bool,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .input_type = fd(2, .String),
        .output_type = fd(3, .String),
        .options = fd(4, .{ .SubMessage = {} }),
        .client_streaming = fd(5, .{ .Varint = .Simple }),
        .server_streaming = fd(6, .{ .Varint = .Simple }),
    };

    pub fn encode(self: MethodDescriptorProto, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !MethodDescriptorProto {
        return pb_decode(MethodDescriptorProto, input, allocator);
    }
    pub fn init(allocator: Allocator) MethodDescriptorProto {
        return pb_init(MethodDescriptorProto, allocator);
    }
    pub fn deinit(self: MethodDescriptorProto) void {
        return pb_deinit(self);
    }
};

pub const FileOptions = struct {
    java_package: ?[]const u8,
    java_outer_classname: ?[]const u8,
    java_multiple_files: ?bool,
    java_generate_equals_and_hash: ?bool,
    java_string_check_utf8: ?bool,
    optimize_for: ?OptimizeMode,
    go_package: ?[]const u8,
    cc_generic_services: ?bool,
    java_generic_services: ?bool,
    py_generic_services: ?bool,
    php_generic_services: ?bool,
    deprecated: ?bool,
    cc_enable_arenas: ?bool,
    objc_class_prefix: ?[]const u8,
    csharp_namespace: ?[]const u8,
    swift_prefix: ?[]const u8,
    php_class_prefix: ?[]const u8,
    php_namespace: ?[]const u8,
    php_metadata_namespace: ?[]const u8,
    ruby_package: ?[]const u8,
    uninterpreted_option: ArrayList(UninterpretedOption),

    pub const _desc_table = .{
        .java_package = fd(1, .String),
        .java_outer_classname = fd(8, .String),
        .java_multiple_files = fd(10, .{ .Varint = .Simple }),
        .java_generate_equals_and_hash = fd(20, .{ .Varint = .Simple }),
        .java_string_check_utf8 = fd(27, .{ .Varint = .Simple }),
        .optimize_for = fd(9, .{ .Varint = .Simple }),
        .go_package = fd(11, .String),
        .cc_generic_services = fd(16, .{ .Varint = .Simple }),
        .java_generic_services = fd(17, .{ .Varint = .Simple }),
        .py_generic_services = fd(18, .{ .Varint = .Simple }),
        .php_generic_services = fd(42, .{ .Varint = .Simple }),
        .deprecated = fd(23, .{ .Varint = .Simple }),
        .cc_enable_arenas = fd(31, .{ .Varint = .Simple }),
        .objc_class_prefix = fd(36, .String),
        .csharp_namespace = fd(37, .String),
        .swift_prefix = fd(39, .String),
        .php_class_prefix = fd(40, .String),
        .php_namespace = fd(41, .String),
        .php_metadata_namespace = fd(44, .String),
        .ruby_package = fd(45, .String),
        .uninterpreted_option = fd(999, .{ .List = .{ .SubMessage = {} } }),
    };

    pub const OptimizeMode = enum(i32) {
        SPEED = 1,
        CODE_SIZE = 2,
        LITE_RUNTIME = 3,
        _,
    };

    pub fn encode(self: FileOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !FileOptions {
        return pb_decode(FileOptions, input, allocator);
    }
    pub fn init(allocator: Allocator) FileOptions {
        return pb_init(FileOptions, allocator);
    }
    pub fn deinit(self: FileOptions) void {
        return pb_deinit(self);
    }
};

pub const MessageOptions = struct {
    message_set_wire_format: ?bool,
    no_standard_descriptor_accessor: ?bool,
    deprecated: ?bool,
    map_entry: ?bool,
    deprecated_legacy_json_field_conflicts: ?bool,
    uninterpreted_option: ArrayList(UninterpretedOption),

    pub const _desc_table = .{
        .message_set_wire_format = fd(1, .{ .Varint = .Simple }),
        .no_standard_descriptor_accessor = fd(2, .{ .Varint = .Simple }),
        .deprecated = fd(3, .{ .Varint = .Simple }),
        .map_entry = fd(7, .{ .Varint = .Simple }),
        .deprecated_legacy_json_field_conflicts = fd(11, .{ .Varint = .Simple }),
        .uninterpreted_option = fd(999, .{ .List = .{ .SubMessage = {} } }),
    };

    pub fn encode(self: MessageOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !MessageOptions {
        return pb_decode(MessageOptions, input, allocator);
    }
    pub fn init(allocator: Allocator) MessageOptions {
        return pb_init(MessageOptions, allocator);
    }
    pub fn deinit(self: MessageOptions) void {
        return pb_deinit(self);
    }
};

pub const FieldOptions = struct {
    ctype: ?CType,
    @"packed": ?bool,
    jstype: ?JSType,
    lazy: ?bool,
    unverified_lazy: ?bool,
    deprecated: ?bool,
    weak: ?bool,
    debug_redact: ?bool,
    retention: ?OptionRetention,
    target: ?OptionTargetType,
    targets: ArrayList(OptionTargetType),
    uninterpreted_option: ArrayList(UninterpretedOption),

    pub const _desc_table = .{
        .ctype = fd(1, .{ .Varint = .Simple }),
        .@"packed" = fd(2, .{ .Varint = .Simple }),
        .jstype = fd(6, .{ .Varint = .Simple }),
        .lazy = fd(5, .{ .Varint = .Simple }),
        .unverified_lazy = fd(15, .{ .Varint = .Simple }),
        .deprecated = fd(3, .{ .Varint = .Simple }),
        .weak = fd(10, .{ .Varint = .Simple }),
        .debug_redact = fd(16, .{ .Varint = .Simple }),
        .retention = fd(17, .{ .Varint = .Simple }),
        .target = fd(18, .{ .Varint = .Simple }),
        .targets = fd(19, .{ .List = .{ .Varint = .Simple } }),
        .uninterpreted_option = fd(999, .{ .List = .{ .SubMessage = {} } }),
    };

    pub const CType = enum(i32) {
        STRING = 0,
        CORD = 1,
        STRING_PIECE = 2,
        _,
    };

    pub const JSType = enum(i32) {
        JS_NORMAL = 0,
        JS_STRING = 1,
        JS_NUMBER = 2,
        _,
    };

    pub const OptionRetention = enum(i32) {
        RETENTION_UNKNOWN = 0,
        RETENTION_RUNTIME = 1,
        RETENTION_SOURCE = 2,
        _,
    };

    pub const OptionTargetType = enum(i32) {
        TARGET_TYPE_UNKNOWN = 0,
        TARGET_TYPE_FILE = 1,
        TARGET_TYPE_EXTENSION_RANGE = 2,
        TARGET_TYPE_MESSAGE = 3,
        TARGET_TYPE_FIELD = 4,
        TARGET_TYPE_ONEOF = 5,
        TARGET_TYPE_ENUM = 6,
        TARGET_TYPE_ENUM_ENTRY = 7,
        TARGET_TYPE_SERVICE = 8,
        TARGET_TYPE_METHOD = 9,
        _,
    };

    pub fn encode(self: FieldOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !FieldOptions {
        return pb_decode(FieldOptions, input, allocator);
    }
    pub fn init(allocator: Allocator) FieldOptions {
        return pb_init(FieldOptions, allocator);
    }
    pub fn deinit(self: FieldOptions) void {
        return pb_deinit(self);
    }
};

pub const OneofOptions = struct {
    uninterpreted_option: ArrayList(UninterpretedOption),

    pub const _desc_table = .{
        .uninterpreted_option = fd(999, .{ .List = .{ .SubMessage = {} } }),
    };

    pub fn encode(self: OneofOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !OneofOptions {
        return pb_decode(OneofOptions, input, allocator);
    }
    pub fn init(allocator: Allocator) OneofOptions {
        return pb_init(OneofOptions, allocator);
    }
    pub fn deinit(self: OneofOptions) void {
        return pb_deinit(self);
    }
};

pub const EnumOptions = struct {
    allow_alias: ?bool,
    deprecated: ?bool,
    deprecated_legacy_json_field_conflicts: ?bool,
    uninterpreted_option: ArrayList(UninterpretedOption),

    pub const _desc_table = .{
        .allow_alias = fd(2, .{ .Varint = .Simple }),
        .deprecated = fd(3, .{ .Varint = .Simple }),
        .deprecated_legacy_json_field_conflicts = fd(6, .{ .Varint = .Simple }),
        .uninterpreted_option = fd(999, .{ .List = .{ .SubMessage = {} } }),
    };

    pub fn encode(self: EnumOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !EnumOptions {
        return pb_decode(EnumOptions, input, allocator);
    }
    pub fn init(allocator: Allocator) EnumOptions {
        return pb_init(EnumOptions, allocator);
    }
    pub fn deinit(self: EnumOptions) void {
        return pb_deinit(self);
    }
};

pub const EnumValueOptions = struct {
    deprecated: ?bool,
    uninterpreted_option: ArrayList(UninterpretedOption),

    pub const _desc_table = .{
        .deprecated = fd(1, .{ .Varint = .Simple }),
        .uninterpreted_option = fd(999, .{ .List = .{ .SubMessage = {} } }),
    };

    pub fn encode(self: EnumValueOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !EnumValueOptions {
        return pb_decode(EnumValueOptions, input, allocator);
    }
    pub fn init(allocator: Allocator) EnumValueOptions {
        return pb_init(EnumValueOptions, allocator);
    }
    pub fn deinit(self: EnumValueOptions) void {
        return pb_deinit(self);
    }
};

pub const ServiceOptions = struct {
    deprecated: ?bool,
    uninterpreted_option: ArrayList(UninterpretedOption),

    pub const _desc_table = .{
        .deprecated = fd(33, .{ .Varint = .Simple }),
        .uninterpreted_option = fd(999, .{ .List = .{ .SubMessage = {} } }),
    };

    pub fn encode(self: ServiceOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !ServiceOptions {
        return pb_decode(ServiceOptions, input, allocator);
    }
    pub fn init(allocator: Allocator) ServiceOptions {
        return pb_init(ServiceOptions, allocator);
    }
    pub fn deinit(self: ServiceOptions) void {
        return pb_deinit(self);
    }
};

pub const MethodOptions = struct {
    deprecated: ?bool,
    idempotency_level: ?IdempotencyLevel,
    uninterpreted_option: ArrayList(UninterpretedOption),

    pub const _desc_table = .{
        .deprecated = fd(33, .{ .Varint = .Simple }),
        .idempotency_level = fd(34, .{ .Varint = .Simple }),
        .uninterpreted_option = fd(999, .{ .List = .{ .SubMessage = {} } }),
    };

    pub const IdempotencyLevel = enum(i32) {
        IDEMPOTENCY_UNKNOWN = 0,
        NO_SIDE_EFFECTS = 1,
        IDEMPOTENT = 2,
        _,
    };

    pub fn encode(self: MethodOptions, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !MethodOptions {
        return pb_decode(MethodOptions, input, allocator);
    }
    pub fn init(allocator: Allocator) MethodOptions {
        return pb_init(MethodOptions, allocator);
    }
    pub fn deinit(self: MethodOptions) void {
        return pb_deinit(self);
    }
};

pub const UninterpretedOption = struct {
    name: ArrayList(NamePart),
    identifier_value: ?[]const u8,
    positive_int_value: ?u64,
    negative_int_value: ?i64,
    double_value: ?f64,
    string_value: ?[]const u8,
    aggregate_value: ?[]const u8,

    pub const _desc_table = .{
        .name = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .identifier_value = fd(3, .String),
        .positive_int_value = fd(4, .{ .Varint = .Simple }),
        .negative_int_value = fd(5, .{ .Varint = .Simple }),
        .double_value = fd(6, .{ .FixedInt = .I64 }),
        .string_value = fd(7, .String),
        .aggregate_value = fd(8, .String),
    };

    pub const NamePart = struct {
        name_part: ?[]const u8,
        is_extension: bool,

        pub const _desc_table = .{
            .name_part = fd(1, .String),
            .is_extension = fd(2, .{ .Varint = .Simple }),
        };

        pub fn encode(self: NamePart, allocator: Allocator) ![]u8 {
            return pb_encode(self, allocator);
        }
        pub fn decode(input: []const u8, allocator: Allocator) !NamePart {
            return pb_decode(NamePart, input, allocator);
        }
        pub fn init(allocator: Allocator) NamePart {
            return pb_init(NamePart, allocator);
        }
        pub fn deinit(self: NamePart) void {
            return pb_deinit(self);
        }
    };

    pub fn encode(self: UninterpretedOption, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !UninterpretedOption {
        return pb_decode(UninterpretedOption, input, allocator);
    }
    pub fn init(allocator: Allocator) UninterpretedOption {
        return pb_init(UninterpretedOption, allocator);
    }
    pub fn deinit(self: UninterpretedOption) void {
        return pb_deinit(self);
    }
};

pub const SourceCodeInfo = struct {
    location: ArrayList(Location),

    pub const _desc_table = .{
        .location = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub const Location = struct {
        path: ArrayList(i32),
        span: ArrayList(i32),
        leading_comments: ?[]const u8,
        trailing_comments: ?[]const u8,
        leading_detached_comments: ArrayList([]const u8),

        pub const _desc_table = .{
            .path = fd(1, .{ .PackedList = .{ .Varint = .Simple } }),
            .span = fd(2, .{ .PackedList = .{ .Varint = .Simple } }),
            .leading_comments = fd(3, .String),
            .trailing_comments = fd(4, .String),
            .leading_detached_comments = fd(6, .{ .List = .String }),
        };

        pub fn encode(self: Location, allocator: Allocator) ![]u8 {
            return pb_encode(self, allocator);
        }
        pub fn decode(input: []const u8, allocator: Allocator) !Location {
            return pb_decode(Location, input, allocator);
        }
        pub fn init(allocator: Allocator) Location {
            return pb_init(Location, allocator);
        }
        pub fn deinit(self: Location) void {
            return pb_deinit(self);
        }
    };

    pub fn encode(self: SourceCodeInfo, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !SourceCodeInfo {
        return pb_decode(SourceCodeInfo, input, allocator);
    }
    pub fn init(allocator: Allocator) SourceCodeInfo {
        return pb_init(SourceCodeInfo, allocator);
    }
    pub fn deinit(self: SourceCodeInfo) void {
        return pb_deinit(self);
    }
};

pub const GeneratedCodeInfo = struct {
    annotation: ArrayList(Annotation),

    pub const _desc_table = .{
        .annotation = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub const Annotation = struct {
        path: ArrayList(i32),
        source_file: ?[]const u8,
        begin: ?i32,
        end: ?i32,
        semantic: ?Semantic,

        pub const _desc_table = .{
            .path = fd(1, .{ .PackedList = .{ .Varint = .Simple } }),
            .source_file = fd(2, .String),
            .begin = fd(3, .{ .Varint = .Simple }),
            .end = fd(4, .{ .Varint = .Simple }),
            .semantic = fd(5, .{ .Varint = .Simple }),
        };

        pub const Semantic = enum(i32) {
            NONE = 0,
            SET = 1,
            ALIAS = 2,
            _,
        };

        pub fn encode(self: Annotation, allocator: Allocator) ![]u8 {
            return pb_encode(self, allocator);
        }
        pub fn decode(input: []const u8, allocator: Allocator) !Annotation {
            return pb_decode(Annotation, input, allocator);
        }
        pub fn init(allocator: Allocator) Annotation {
            return pb_init(Annotation, allocator);
        }
        pub fn deinit(self: Annotation) void {
            return pb_deinit(self);
        }
    };

    pub fn encode(self: GeneratedCodeInfo, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !GeneratedCodeInfo {
        return pb_decode(GeneratedCodeInfo, input, allocator);
    }
    pub fn init(allocator: Allocator) GeneratedCodeInfo {
        return pb_init(GeneratedCodeInfo, allocator);
    }
    pub fn deinit(self: GeneratedCodeInfo) void {
        return pb_deinit(self);
    }
};

pub const Any = struct {
    type_url: ?[]const u8,
    value: ?[]const u8,

    pub const _desc_table = .{
        .type_url = fd(1, .String),
        .value = fd(2, .String),
    };

    pub fn encode(self: Any, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !Any {
        return pb_decode(Any, input, allocator);
    }
    pub fn init(allocator: Allocator) Any {
        return pb_init(Any, allocator);
    }
    pub fn deinit(self: Any) void {
        return pb_deinit(self);
    }
};

pub const Duration = struct {
    seconds: ?i64,
    nanos: ?i32,

    pub const _desc_table = .{
        .seconds = fd(1, .{ .Varint = .Simple }),
        .nanos = fd(2, .{ .Varint = .Simple }),
    };

    pub fn encode(self: Duration, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !Duration {
        return pb_decode(Duration, input, allocator);
    }
    pub fn init(allocator: Allocator) Duration {
        return pb_init(Duration, allocator);
    }
    pub fn deinit(self: Duration) void {
        return pb_deinit(self);
    }
};

pub const FieldMask = struct {
    paths: ArrayList([]const u8),

    pub const _desc_table = .{
        .paths = fd(1, .{ .List = .String }),
    };

    pub fn encode(self: FieldMask, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !FieldMask {
        return pb_decode(FieldMask, input, allocator);
    }
    pub fn init(allocator: Allocator) FieldMask {
        return pb_init(FieldMask, allocator);
    }
    pub fn deinit(self: FieldMask) void {
        return pb_deinit(self);
    }
};

pub const Timestamp = struct {
    seconds: ?i64,
    nanos: ?i32,

    pub const _desc_table = .{
        .seconds = fd(1, .{ .Varint = .Simple }),
        .nanos = fd(2, .{ .Varint = .Simple }),
    };

    pub fn encode(self: Timestamp, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !Timestamp {
        return pb_decode(Timestamp, input, allocator);
    }
    pub fn init(allocator: Allocator) Timestamp {
        return pb_init(Timestamp, allocator);
    }
    pub fn deinit(self: Timestamp) void {
        return pb_deinit(self);
    }
};

pub const DoubleValue = struct {
    value: ?f64,

    pub const _desc_table = .{
        .value = fd(1, .{ .FixedInt = .I64 }),
    };

    pub fn encode(self: DoubleValue, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !DoubleValue {
        return pb_decode(DoubleValue, input, allocator);
    }
    pub fn init(allocator: Allocator) DoubleValue {
        return pb_init(DoubleValue, allocator);
    }
    pub fn deinit(self: DoubleValue) void {
        return pb_deinit(self);
    }
};

pub const FloatValue = struct {
    value: ?f32,

    pub const _desc_table = .{
        .value = fd(1, .{ .FixedInt = .I32 }),
    };

    pub fn encode(self: FloatValue, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !FloatValue {
        return pb_decode(FloatValue, input, allocator);
    }
    pub fn init(allocator: Allocator) FloatValue {
        return pb_init(FloatValue, allocator);
    }
    pub fn deinit(self: FloatValue) void {
        return pb_deinit(self);
    }
};

pub const Int64Value = struct {
    value: ?i64,

    pub const _desc_table = .{
        .value = fd(1, .{ .Varint = .Simple }),
    };

    pub fn encode(self: Int64Value, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !Int64Value {
        return pb_decode(Int64Value, input, allocator);
    }
    pub fn init(allocator: Allocator) Int64Value {
        return pb_init(Int64Value, allocator);
    }
    pub fn deinit(self: Int64Value) void {
        return pb_deinit(self);
    }
};

pub const UInt64Value = struct {
    value: ?u64,

    pub const _desc_table = .{
        .value = fd(1, .{ .Varint = .Simple }),
    };

    pub fn encode(self: UInt64Value, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !UInt64Value {
        return pb_decode(UInt64Value, input, allocator);
    }
    pub fn init(allocator: Allocator) UInt64Value {
        return pb_init(UInt64Value, allocator);
    }
    pub fn deinit(self: UInt64Value) void {
        return pb_deinit(self);
    }
};

pub const Int32Value = struct {
    value: ?i32,

    pub const _desc_table = .{
        .value = fd(1, .{ .Varint = .Simple }),
    };

    pub fn encode(self: Int32Value, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !Int32Value {
        return pb_decode(Int32Value, input, allocator);
    }
    pub fn init(allocator: Allocator) Int32Value {
        return pb_init(Int32Value, allocator);
    }
    pub fn deinit(self: Int32Value) void {
        return pb_deinit(self);
    }
};

pub const UInt32Value = struct {
    value: ?u32,

    pub const _desc_table = .{
        .value = fd(1, .{ .Varint = .Simple }),
    };

    pub fn encode(self: UInt32Value, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !UInt32Value {
        return pb_decode(UInt32Value, input, allocator);
    }
    pub fn init(allocator: Allocator) UInt32Value {
        return pb_init(UInt32Value, allocator);
    }
    pub fn deinit(self: UInt32Value) void {
        return pb_deinit(self);
    }
};

pub const BoolValue = struct {
    value: ?bool,

    pub const _desc_table = .{
        .value = fd(1, .{ .Varint = .Simple }),
    };

    pub fn encode(self: BoolValue, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !BoolValue {
        return pb_decode(BoolValue, input, allocator);
    }
    pub fn init(allocator: Allocator) BoolValue {
        return pb_init(BoolValue, allocator);
    }
    pub fn deinit(self: BoolValue) void {
        return pb_deinit(self);
    }
};

pub const StringValue = struct {
    value: ?[]const u8,

    pub const _desc_table = .{
        .value = fd(1, .String),
    };

    pub fn encode(self: StringValue, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !StringValue {
        return pb_decode(StringValue, input, allocator);
    }
    pub fn init(allocator: Allocator) StringValue {
        return pb_init(StringValue, allocator);
    }
    pub fn deinit(self: StringValue) void {
        return pb_deinit(self);
    }
};

pub const BytesValue = struct {
    value: ?[]const u8,

    pub const _desc_table = .{
        .value = fd(1, .String),
    };

    pub fn encode(self: BytesValue, allocator: Allocator) ![]u8 {
        return pb_encode(self, allocator);
    }
    pub fn decode(input: []const u8, allocator: Allocator) !BytesValue {
        return pb_decode(BytesValue, input, allocator);
    }
    pub fn init(allocator: Allocator) BytesValue {
        return pb_init(BytesValue, allocator);
    }
    pub fn deinit(self: BytesValue) void {
        return pb_deinit(self);
    }
};
