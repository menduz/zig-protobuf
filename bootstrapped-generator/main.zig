const warn = @import("std").debug.warn;
const std = @import("std");
const plugin = @import("google/protobuf/compiler.pb.zig");
const descriptor = @import("google/protobuf.pb.zig");
const mem = std.mem;
const FullName = @import("./FullName.zig").FullName;

const allocator = std.heap.page_allocator;

const string = []const u8;

pub fn main() !void {
    const stdin = &std.io.getStdIn();

    // Read the contents (up to 10MB)
    const buffer_size = 1024 * 1024 * 10;

    const file_buffer = try stdin.readToEndAlloc(allocator, buffer_size);
    defer allocator.free(file_buffer);

    var request: plugin.CodeGeneratorRequest = try plugin.CodeGeneratorRequest.decode(file_buffer, allocator);

    var ctx: GenerationContext = GenerationContext{ .req = request };

    try ctx.writeToStdOut();
}

const GenerationContext = struct {
    req: plugin.CodeGeneratorRequest,
    res: plugin.CodeGeneratorResponse = plugin.CodeGeneratorResponse.init(allocator),

    /// map of known packages
    known_packages: std.StringHashMap(FullName) = std.StringHashMap(FullName).init(allocator),

    /// map of "package.fully.qualified.names" to output string lists
    output_lists: std.StringHashMap(std.ArrayList([]const u8)) = std.StringHashMap(std.ArrayList([]const u8)).init(allocator),

    const Self = @This();

    pub fn writeToStdOut(self: *Self) !void {
        const stdout = &std.io.getStdOut();

        for (self.req.proto_file.items) |file| {
            const t: descriptor.FileDescriptorProto = file;

            if (t.package) |package| {
                try self.known_packages.put(package, FullName{ .buf = package });
            } else {
                self.res.@"error" = try std.fmt.allocPrint(allocator, "ERROR Package directive missing in {?s}\n", .{file.name});
                break;
            }
        }

        for (self.req.proto_file.items) |file| {
            const t: descriptor.FileDescriptorProto = file;

            const name = FullName{ .buf = t.package.? };

            try self.printFileDeclarations(name, file);
        }

        var it = self.output_lists.iterator();
        while (it.next()) |entry| {
            var ret = plugin.CodeGeneratorResponse.File.init(allocator);

            ret.name = try self.fileNameFromPackage(entry.key_ptr.*);
            ret.content = try std.mem.concat(allocator, u8, entry.value_ptr.*.items);

            try self.res.file.append(ret);
        }

        self.res.supported_features = @enumToInt(plugin.CodeGeneratorResponse.Feature.FEATURE_PROTO3_OPTIONAL);

        const r = try self.res.encode(allocator);
        _ = try stdout.write(r);
    }

    fn fileNameFromPackage(self: *Self, package: string) !string {
        return try std.fmt.allocPrint(allocator, "{?s}.pb.zig", .{try self.packageNameToOutputFileName(package)});
    }

    fn packageNameToOutputFileName(_: *Self, n: string) !string {
        var r: []u8 = try allocator.alloc(u8, n.len);
        for (n, 0..) |byte, i| {
            r[i] = switch (byte) {
                '.', '/', '\\' => '/',
                else => byte,
            };
        }
        return r;
    }

    fn getOutputList(self: *Self, name: FullName) !*std.ArrayList([]const u8) {
        var entry = try self.output_lists.getOrPut(name.buf);

        if (!entry.found_existing) {
            var list = std.ArrayList([]const u8).init(allocator);

            try list.append(try std.fmt.allocPrint(allocator,
                \\// Code generated by protoc-gen-zig
                \\ ///! package {s}
                \\const std = @import("std");
                \\const mem = std.mem;
                \\const Allocator = mem.Allocator;
                \\const ArrayList = std.ArrayList;
                \\
                \\const protobuf = @import("protobuf");
                \\const pb_decode = protobuf.pb_decode;
                \\const pb_encode = protobuf.pb_encode;
                \\const pb_deinit = protobuf.pb_deinit;
                \\const pb_init = protobuf.pb_init;
                \\const fd = protobuf.fd;
                \\
            , .{name.buf}));

            // collect all imports from all files sharing the same package
            var importedPackages = std.StringHashMap(bool).init(allocator);

            for (self.req.proto_file.items) |file| {
                if (name.eqlString(file.package.?)) {
                    for (file.dependency.items) |dep| {
                        for (self.req.proto_file.items) |item| {
                            if (std.mem.eql(u8, dep, item.name.?)) {
                                try importedPackages.put(item.package.?, true);
                            }
                        }
                    }
                }
            }

            var it = importedPackages.keyIterator();
            while (it.next()) |package| {
                if (!std.mem.eql(u8, package.*, name.buf)) {
                    try list.append(try std.fmt.allocPrint(allocator, "/// import package {?s}\n", .{package.*}));
                    try list.append(try std.fmt.allocPrint(allocator, "const {!s} = @import(\"{!s}\");\n", .{ self.escapeFqn(package.*), self.resolvePath(name.buf, package.*) }));
                }
            }

            entry.value_ptr.* = list;
        }

        return entry.value_ptr;
    }

    /// resolves an import path from the file A relative to B
    fn resolvePath(self: *Self, a: string, b: string) !string {
        const aPath = std.fs.path.dirname(try self.fileNameFromPackage(a)) orelse "";
        const bPath = try self.fileNameFromPackage(b);
        return std.fs.path.relative(allocator, aPath, bPath);
    }

    pub fn printFileDeclarations(self: *Self, fqn: FullName, file: descriptor.FileDescriptorProto) !void {
        var list = try self.getOutputList(fqn);

        try self.generateEnums(list, fqn, file, file.enum_type);
        try self.generateMessages(list, fqn, file, file.message_type);
    }

    /// this function finds the parent file of a type fully-qualified name
    fn findSourceFile(_: Self, currentFile: descriptor.FileDescriptorProto, fullyQualifiedName: ?string) ?descriptor.FileDescriptorProto {
        _ = currentFile;
        _ = fullyQualifiedName;
        return null;
    }

    fn getFileName(_: *Self, filename: string) string {
        // removes the tailing .proto
        return filename[0 .. filename.len - ".proto".len];
    }

    fn generateEnums(ctx: *Self, list: *std.ArrayList(string), fqn: FullName, file: descriptor.FileDescriptorProto, enums: std.ArrayList(descriptor.EnumDescriptorProto)) !void {
        _ = ctx;
        _ = file;
        _ = fqn;

        for (enums.items) |theEnum| {
            const e: descriptor.EnumDescriptorProto = theEnum;

            try list.append(try std.fmt.allocPrint(allocator, "\npub const {?s} = enum(i32) {{\n", .{e.name}));

            for (e.value.items) |elem| {
                try list.append(try std.fmt.allocPrint(allocator, "   {?s} = {},\n", .{ elem.name, elem.number orelse 0 }));
            }

            try list.append("    _,\n};\n\n");
        }
    }

    fn getFieldName(_: *Self, field: descriptor.FieldDescriptorProto) !string {
        if (std.zig.Token.keywords.get(field.name.?) != null)
            return try std.fmt.allocPrint(allocator, "@\"{?s}\"", .{field.name})
        else
            return field.name.?;
    }

    fn fieldTypeFqn(ctx: *Self, parentFqn: FullName, file: descriptor.FileDescriptorProto, field: descriptor.FieldDescriptorProto) !string {
        if (field.type_name) |typeName| {
            const fullTypeName = FullName{ .buf = typeName[1..] };

            if (fullTypeName.parent()) |parent| {
                if (parent.eql(parentFqn)) {
                    return fullTypeName.name().buf;
                }
                if (parent.eql(FullName{ .buf = file.package.? })) {
                    return fullTypeName.name().buf;
                }
            }

            var parent: ?FullName = fullTypeName.parent();
            const filePackage = FullName{ .buf = file.package.? };

            // iterate parents until we find a parent that matches the known_packages
            while (parent != null) {
                var it = ctx.known_packages.valueIterator();

                while (it.next()) |value| {

                    // it is in current package, return full name
                    if (filePackage.eql(parent.?)) {
                        const name = fullTypeName.buf[parent.?.buf.len + 1 ..];
                        return name;
                    }

                    // it is in different package. return fully qualified name including accessor
                    if (value.eql(parent.?)) {
                        const prop = try ctx.escapeFqn(parent.?.buf);
                        const name = fullTypeName.buf[prop.len + 1 ..];
                        return try std.fmt.allocPrint(allocator, "{s}.{s}", .{ prop, name });
                    }
                }

                parent = parent.?.parent();
            }

            std.debug.print("Unknown type: {s} from {s} in {?s}\n", .{ fullTypeName.buf, parentFqn.buf, file.package });

            return try ctx.escapeFqn(field.type_name.?);
        }
        @panic("field has no type");
    }

    fn escapeFqn(_: *Self, n: string) !string {
        var r: []u8 = try allocator.alloc(u8, n.len);
        for (n, 0..) |byte, i| {
            r[i] = switch (byte) {
                '.', '/', '\\' => '_',
                else => byte,
            };
        }
        return r;
    }

    fn isRepeated(_: *Self, field: descriptor.FieldDescriptorProto) bool {
        if (field.label) |l| {
            return l == .LABEL_REPEATED;
        } else {
            return false;
        }
    }

    fn isScalar(t: descriptor.FieldDescriptorProto.Type) bool {
        return switch (t) {
            .TYPE_DOUBLE, .TYPE_FLOAT, .TYPE_INT32, .TYPE_INT64, .TYPE_UINT32, .TYPE_UINT64, .TYPE_SINT32, .TYPE_SINT64, .TYPE_FIXED32, .TYPE_FIXED64, .TYPE_SFIXED32, .TYPE_SFIXED64, .TYPE_BOOL, .TYPE_STRING, .TYPE_BYTES => true,
            else => false,
        };
    }

    fn isPacked(_: *Self, file: descriptor.FileDescriptorProto, field: descriptor.FieldDescriptorProto) bool {
        if (field.options) |o| {
            if (o.@"packed") |p| {
                return p;
            } else if (file.syntax != null and std.mem.eql(u8, file.syntax.?, "proto3")) {
                if (field.type) |t| {
                    return isScalar(t);
                } else {
                    return false;
                }
            }
        }
        return false;
    }

    fn isOptional(_: *Self, field: descriptor.FieldDescriptorProto) bool {
        if (field.proto3_optional == true) {
            return true;
        } else if (field.label) |l| {
            return l == .LABEL_OPTIONAL;
        } else {
            return false;
        }
    }

    fn getFieldType(ctx: *Self, fqn: FullName, currentFile: descriptor.FileDescriptorProto, field: descriptor.FieldDescriptorProto) !string {
        var prefix: string = "";
        var postfix: string = "";
        const repated = ctx.isRepeated(field);
        const t = field.type.?;

        if (!repated) {
            // look for optional types
            switch (t) {
                .TYPE_MESSAGE, .TYPE_STRING, .TYPE_BYTES => prefix = "?",
                else => if (ctx.isOptional(field)) {
                    prefix = "?";
                },
            }
        } else {
            prefix = "ArrayList(";
            postfix = ")";
        }

        const infix: string = switch (t) {
            .TYPE_SINT32, .TYPE_SFIXED32, .TYPE_INT32 => "i32",
            .TYPE_UINT32, .TYPE_FIXED32 => "u32",
            .TYPE_INT64, .TYPE_SINT64, .TYPE_SFIXED64 => "i64",
            .TYPE_UINT64, .TYPE_FIXED64 => "u64",
            .TYPE_BOOL => "bool",
            .TYPE_DOUBLE => "f64",
            .TYPE_FLOAT => "f32",
            .TYPE_STRING, .TYPE_BYTES => "[]const u8",
            .TYPE_ENUM, .TYPE_MESSAGE => try ctx.fieldTypeFqn(fqn, currentFile, field),
            else => {
                std.debug.print("Unrecognized type {}\n", .{t});
                @panic("Unrecognized type");
            },
        };

        return try std.mem.concat(allocator, u8, &.{ prefix, infix, postfix });
    }

    fn getFieldTypeDescriptor(ctx: *Self, _: FullName, file: descriptor.FileDescriptorProto, field: descriptor.FieldDescriptorProto) !string {
        var prefix: string = "";

        var postfix: string = "";

        if (ctx.isRepeated(field)) {
            if (ctx.isPacked(file, field)) {
                prefix = ".{ .PackedList = ";
            } else {
                prefix = ".{ .List = ";
            }
            postfix = "}";
        }

        const infix: string = switch (field.type.?) {
            .TYPE_DOUBLE, .TYPE_SFIXED64, .TYPE_FIXED64 => ".{ .FixedInt = .I64 }",
            .TYPE_FLOAT, .TYPE_SFIXED32, .TYPE_FIXED32 => ".{ .FixedInt = .I32 }",
            .TYPE_ENUM, .TYPE_UINT32, .TYPE_UINT64, .TYPE_BOOL, .TYPE_INT32, .TYPE_INT64 => ".{ .Varint = .Simple }",
            .TYPE_SINT32, .TYPE_SINT64 => ".{ .Varint = .ZigZagOptimized }",
            .TYPE_STRING, .TYPE_BYTES => ".String",
            .TYPE_MESSAGE => ".{ .SubMessage = {} }",
            else => {
                std.debug.print("Unrecognized type {}\n", .{field.type.?});
                @panic("Unrecognized type");
            },
        };

        return try std.mem.concat(allocator, u8, &.{ prefix, infix, postfix });
    }

    fn generateFieldDescriptor(ctx: *Self, list: *std.ArrayList(string), fqn: FullName, file: descriptor.FileDescriptorProto, message: descriptor.DescriptorProto, field: descriptor.FieldDescriptorProto) !void {
        _ = message;
        var name = try ctx.getFieldName(field);
        var descStr = try ctx.getFieldTypeDescriptor(fqn, file, field);
        const format = "        .{s} = fd({?d}, {s}),\n";
        try list.append(try std.fmt.allocPrint(allocator, format, .{ name, field.number, descStr }));
    }

    fn generateFieldDeclaration(ctx: *Self, list: *std.ArrayList(string), fqn: FullName, file: descriptor.FileDescriptorProto, message: descriptor.DescriptorProto, field: descriptor.FieldDescriptorProto) !void {
        _ = message;
        var typeStr = try ctx.getFieldType(fqn, file, field);
        try list.append(try std.fmt.allocPrint(allocator, "    {s}: {s},\n", .{ try ctx.getFieldName(field), typeStr }));
    }

    fn generateMessages(ctx: *Self, list: *std.ArrayList(string), fqn: FullName, file: descriptor.FileDescriptorProto, messages: std.ArrayList(descriptor.DescriptorProto)) !void {
        for (messages.items) |message| {
            const m: descriptor.DescriptorProto = message;
            const messageFqn = try fqn.append(allocator, m.name.?);

            try list.append(try std.fmt.allocPrint(allocator, "\npub const {?s} = struct {{\n", .{m.name}));

            for (m.field.items) |f| {
                try ctx.generateFieldDeclaration(list, messageFqn, file, m, f);
            }

            // field descriptors
            try list.append(
                \\
                \\    pub const _desc_table = .{
                \\
            );

            for (m.field.items) |f| {
                try ctx.generateFieldDescriptor(list, messageFqn, file, m, f);
            }

            try list.append(
                \\    };
                \\
            );

            try ctx.generateEnums(list, messageFqn, file, m.enum_type);
            try ctx.generateMessages(list, messageFqn, file, m.nested_type);

            try list.append(try std.fmt.allocPrint(allocator,
                \\
                \\
                \\    pub fn encode(self: {?s}, allocator: Allocator) ![]u8 {{
                \\        return pb_encode(self, allocator);
                \\    }}
                \\    pub fn decode(input: []const u8, allocator: Allocator) !{?s} {{
                \\        return pb_decode({?s}, input, allocator);
                \\    }}
                \\    pub fn init(allocator: Allocator) {?s} {{
                \\        return pb_init({?s}, allocator);
                \\    }}
                \\    pub fn deinit(self: {?s}) void {{
                \\        return pb_deinit(self);
                \\    }}
                \\}};
                \\
            , .{ m.name, m.name, m.name, m.name, m.name, m.name }));
        }
    }
};
